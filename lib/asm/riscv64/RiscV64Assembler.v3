// Copyright 2023 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// General-purpose registers.
enum RiscV64Gpr {
	 X0,  X1,  X2,  X3,
	 X4,  X5,  X6,  X7,
	 X8,  X9, X10, X11,
	X12, X13, X14, X15,
	X16, X17, X18, X19,
	X20, X21, X22, X23,
	X24, X25, X26, X27,
	X28, X29, X30, X31
}

// Floating point registers.
enum RiscVFpr {
	 F0,  F1,  F2,  F3,
	 F4,  F5,  F6,  F7,
	 F8,  F9, F10, F11,
	F12, F13, F14, F15,
	F16, F17, F18, F19,
	F20, F21, F22, F23,
	F24, F25, F26, F27,
	F28, F29, F30, F31
}

component RiscV64Regs {
	// aliases for GPRs.
	def RA = RiscV64Gpr.X1;
	def SP = RiscV64Gpr.X2;
	def GP = RiscV64Gpr.X3;
	def TP = RiscV64Gpr.X4;
	def FP = RiscV64Gpr.X8;
	
	def S0  = RiscV64Gpr.X8;
	def S1  = RiscV64Gpr.X9;
	def S2  = RiscV64Gpr.X18;
	def S3  = RiscV64Gpr.X19;
	def S4  = RiscV64Gpr.X20;
	def S5  = RiscV64Gpr.X21;
	def S6  = RiscV64Gpr.X22;
	def S7  = RiscV64Gpr.X23;
	def S8  = RiscV64Gpr.X24;
	def S9  = RiscV64Gpr.X25;
	def S10 = RiscV64Gpr.X26;
	def S11 = RiscV64Gpr.X27;
	
	def A0 = RiscV64Gpr.X10;
	def A1 = RiscV64Gpr.X11;
	def A2 = RiscV64Gpr.X12;
	def A3 = RiscV64Gpr.X13;
	def A4 = RiscV64Gpr.X14;
	def A5 = RiscV64Gpr.X15;
	def A6 = RiscV64Gpr.X16;
	def A7 = RiscV64Gpr.X17;

	def T0 = RiscV64Gpr.X5;
	def T1 = RiscV64Gpr.X6;
	def T2 = RiscV64Gpr.X7;
	def T3 = RiscV64Gpr.X28;
	def T4 = RiscV64Gpr.X29;
	def T5 = RiscV64Gpr.X30;
	def T6 = RiscV64Gpr.X31;
}
// Assembles instructions into the provided {DataWriter}.
class RiscV64Assembler(w: DataWriter) {

	def pos() -> int {
		return w.pos;
	}

	def addi(rd: RiscV64Gpr, rs: RiscV64Gpr, imm: i12) -> this { emit_i_type(7, rd, 3, rs, u12.view(imm)); }

	def nop() -> this { emit_i_type(7, RiscV64Gpr.X0, 3, RiscV64Gpr.X0, 0); }

	// R-Type
	// ===================================================================
	//  31        25 24     20 19     15 14 12 11      7 6             0
	// -------------------------------------------------------------------
	// | funct7     | rs2     | rs1     | f3  | rd      | opcode        |
	def emit_r_type(opcode: u7, rd: RiscV64Gpr, f3: u2, rs1: RiscV64Gpr, rs2: RiscV64Gpr, f7: u7) {
		var bits = u32.view(opcode);
		bits |= u32.view(rd.tag) << 7;
		bits |= u32.view(f3) << 12;
		bits |= u32.view(rs1.tag) << 15;
		bits |= u32.view(rs2.tag) << 20;
		bits |= u32.view(f7) << 25;
		w.put_b32(int.view(bits));
	}

	// I-Type
	// ===================================================================
	//  31                  20 19     15 14 12 11      7 6             0
	// -------------------------------------------------------------------
	// | imm[11:0]            | rs1     | f3  | rd      | opcode        |
	def emit_i_type(opcode: u7, rd: RiscV64Gpr, f3: u2, rs1: RiscV64Gpr, imm: u12) {
		var bits = u32.view(opcode);
		bits |= u32.view(rd.tag) << 7;
		bits |= u32.view(f3) << 12;
		bits |= u32.view(rs1.tag) << 15;
		bits |= u32.view(imm) << 20;
		w.put_b32(int.view(bits));
	}

	// S-Type
	// ===================================================================
	//  31        25 24     20 19     15 14 12 11      7 6             0
	// -------------------------------------------------------------------
	// | imm[11:5]  | rs2     | rs1     | f3  | imm[4:0]| opcode        |
	def emit_s_type(opcode: u7, rd: RiscV64Gpr, rs1: RiscV64Gpr, rs2: RiscV64Gpr, imm: u12) {
		var bits = u32.view(opcode);
		bits |= u32.view(rd.tag) << 7;
		bits |= u32.view(u5.view(imm)) << 12;
		bits |= u32.view(rs1.tag) << 15;
		bits |= u32.view(rs2.tag) << 20;
		bits |= u32.view(imm >> 5) << 25;
		w.put_b32(int.view(bits));
	}
	
	// U-Type
	// ===================================================================
	//  31                                  12 11      7 6             0
	// -------------------------------------------------------------------
	// | imm[31:12]                           | rd      | opcode        |
	def emit_u_type(opcode: u7, rd: RiscV64Gpr, imm: u20) {
		var bits = u32.view(opcode);
		bits |= u32.view(rd.tag) << 7;
		bits |= u32.view(imm) << 12;
		w.put_b32(int.view(bits));
	}

	// B-Type (branches with signed, 2-byte aligned targets)
	// ===================================================================
	//  31        25 24     20 19     15 14 12 11      7 6             0
	// -------------------------------------------------------------------
	// | imm[12]   | rs2     | rs1     | f3  | imm[4:1]| opcode        |
	//   imm[10:5]                             imm[11]
	def emit_b_type(opcode: u7, f3: u2, rs1: RiscV64Gpr, rs2: RiscV64Gpr, imm: i13) {
		var bits = u32.view(opcode);
		bits |= u32.view((imm >> 11) & 1) << 7;
		bits |= u32.view(imm & 0x1E) << 8;
		bits |= u32.view(f3) << 12;
		bits |= u32.view(rs1.tag) << 15;
		bits |= u32.view(rs2.tag) << 20;
		bits |= u32.view((imm << 5) & 0x3F);
		bits |= u32.view(imm >> 12) << 31;
		w.put_b32(int.view(bits));
	}

	// J-type (jumps with signed, 2-byte aligned targets)
	// ===================================================================
	//  31                                  12 11      7 6             0
	// -------------------------------------------------------------------
	// | imm[20] imm[10:1] imm[11] imm[19:12] | rd      | opcode        |
	def emit_j_type(opcode: u7, rd: RiscV64Gpr, imm: i21) {
		var bits = u32.view(opcode);
		bits |= u32.view(rd.tag) << 7;
		bits |= u32.view(u8.view(imm >> 12)) << 12;
		bits |= u32.view(u1.view(imm >> 11)) << 20;
		bits |= u32.view(u11.view(imm >> 1)) << 21;
		bits |= u32.view(imm >> 20) << 31;
		w.put_b32(int.view(bits));
		// var bits = imm[20] ## imm[10:1] ## imm[11] ## imm[19:12] ## u5.!(rd.tag) ## u7.!(opcode);
	}
}
