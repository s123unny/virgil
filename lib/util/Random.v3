// Copyright 2013 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utilities for random numbers.
component Random {
	var seed = 121013;

	// return a pseudo-random number in the interval [0, max)
	def random(max: int) -> int {
		return random2(max, 0);
	}
	// return a pseudo-random number in the interval [0, max) with an extra
	// source of entropy
	def random2(max: int, extra: int) -> int {
		var s = seed * 1664525 + extra + 1013904223; // multiplicative random
		s = s ^ (s >>> 16) ^ (s >>> 24);             // XOR of higher bits
		return ((seed = s) & 2147483647) % max;      // limit to max
	}
	// return the next seed in the range [int.min, int.max]
	def next() -> int {
		var s = seed * 1664525 + 1013904223;         // multiplicativea random
		return seed = s ^ (s >>> 16) ^ (s >>> 24);   // XOR of higher bits
	}
	// use a random number to flip a coin with a given probability
	def flip(num: int, denom: int) -> bool {
		return (random2(denom, num) % denom) < num;
	}
}
