// Copyright 2013 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A queue of work items, to be performed in order.
class WorkQueue {
	private var listHead: WorkUnit;
	private var listTail: WorkUnit;

	// Add the {work} function with parameter {a} to the work queue.
	def add<A, B>(func: A -> B, a: A) {
		var unit = WorkUnit.new(closure(func, a, _));
		if (listHead == null) listHead = unit;
		else listTail.next = unit;
		listTail = unit;
	}
	// Perform all work in the work queue, in order of insertion, until empty.
	def drain() {
		while (true) {
			var unit = listHead;
			if (unit != null) {
				listHead = unit.next;
				unit.run();
			} else {
				listHead = listTail = null;
				break;
			}
		}
	}
}
// A unit of work
private class WorkUnit(run: void -> void) {
	var next: WorkUnit;
}
def closure<A, B>(func: A -> B, a: A, v: void) { func(a); }
