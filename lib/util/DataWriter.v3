// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility for writing data items into an array of bytes, offering routines
// to write bytes, integers, LEBs, etc. A data writer has an internal storage
// that by default collects all bytes written, like a {Vector}, but this behavior
// can be overridden by changing the {refill} function. E.g. the {refill}
// function can be overridden to stream already-written bytes to I/O.
class DataWriter {
	def var data: Array<byte>;		// array containing data
	def var pos: int;			// current position
	private var max: int;			// the maximum position ever accessed
	var refill = DataWriter.growI2X;	// refill behavior

	// Write a byte.
	def putb(data: int) -> this {
		acquire(1)[pos++] = byte.view(data);
	}
	// Write two bytes.
	def putbb(b0: int, b1: int) -> this {
		var a = acquire(2), p = pos;
		a[p + 0] = byte.view(b0);
		a[p + 1] = byte.view(b1);
		pos = p + 2;
	}
	// Write three bytes.
	def putbbb(b0: int, b1: int, b2: int) -> this {
		var a = acquire(3), p = pos;
		a[p + 0] = byte.view(b0);
		a[p + 1] = byte.view(b1);
		a[p + 2] = byte.view(b2);
		pos = p + 3;
	}
	// Write a 16-bit little-endian integer.
	def put_b16(data: int) -> this {
		var a = acquire(2), p = pos;
		a[p + 0] = byte.view(data);
		a[p + 1] = byte.view(data >> 8);
		pos = p + 2;
	}
	// Write a 32-bit little-endian integer.
	def put_b32(data: int) -> this {
		var a = acquire(4), p = pos;
		a[p + 0] = byte.view(data);
		a[p + 1] = byte.view(data >> 8);
		a[p + 2] = byte.view(data >> 16);
		a[p + 3] = byte.view(data >> 24);
		pos = p + 4;
	}
	// Write a 64-bit little-endian integer.
	def put_b64(data: long) -> this {
		put_b32(int.view(data));
		put_b32(int.view(data >> 32));
	}
	// Write a 16-bit big-endian integer.
	def put_b16be(data: int) -> this {
		var a = acquire(2), p = pos;
		a[p + 0] = byte.view(data >> 8);
		a[p + 1] = byte.view(data);
		pos = p + 2;
	}
	// Write a 32-bit big-endian integer.
	def put_b32be(data: int) -> this {
		var a = acquire(4), p = pos;
		a[p + 0] = byte.view(data >> 24);
		a[p + 1] = byte.view(data >> 16);
		a[p + 2] = byte.view(data >> 8);
		a[p + 3] = byte.view(data);
		pos = p + 4;
	}
	// Write a 64-bit big-endian integer.
	def put_b64be(data: long) -> this {
		put_b32be(int.view(data >> 32));
		put_b32be(int.view(data));
	}
	// Write a signed 32-bit LEB.
	def put_sleb32(data: int) -> this {
		if (data >= 0) {
			while (data >= 0x40) {
				putb(0x80 | (data & 0x7F));
				data = data >> 7;
			}
		} else {
			while ((data >> 6) != -1) {
				putb(0x80 | (data & 0x7F));
				data = data >> 7;
			}
		}
		putb(data & 0x7F);
	}
	// Write a signed 64-bit LEB.
	def put_sleb64(data: long) -> this {
		if (data >= 0) {
			while (data >= 0x40) {
				putb(0x80 | int.view(data & 0x7F));
				data = data >> 7;
			}
		} else {
			while ((data >> 6) != -1) {
				putb(0x80 | int.view(data & 0x7F));
				data = data >> 7;
			}
		}
		putb(int.view(data & 0x7F));
	}
	// Write an unsigned 32-bit LEB.
	def put_uleb32(data: u32) -> this {
		while (data >= 0x80) {
			putb(int.view(0x80u | (data & 0x7F)));
			data = data >> 7;
		}
		putb(int.view(data));
	}
	// Write all the bytes of the given array to this writer.
	def puta(data: Array<byte>) -> this {
		if (data == null) return;
		putr(data);
	}
	// Write the bytes from the given range in the array to this writer.
	def putk(data: Array<byte>, start: int, end: int) -> this {
		if (data == null) return;
		putr(data[start ... end]);
	}
	// Write the bytes from the given range in the array to this writer and return {void}.
	def putkv(data: Array<byte>, start: int, end: int) {
		if (data == null) return;
		putr(data[start ... end]);
	}
	// Write the bytes from the given range to this writer.
	def putr(data: Range<byte>) -> this {
		var len = data.length;
		acquire(len);
		var a = this.data[pos ..+ len];
		for (i < len) a[i] = data[i];
		pos += len;
	}
	// Write {length} zero bytes.
	def zeroN(length: int) -> this {
		var a = acquire(length), end = pos + length;
		for (p = pos; p < end; p++) a[p] = 0;
		pos = end;
	}
	// Skip {length} bytes.
	def skipN(length: int) -> this {
		acquire(length);
		pos = pos + length;
	}
	// Skip 5 bytes for a 32-bit LEB that will be written later.
	def skip_leb32() -> int {
		var oldpos = pos;
		skipN(5);
		return oldpos;
	}
	// Overwrite a 32-bit LEB at the current position.
	def overwrite_uleb32(val: int) -> this {
		acquire(5);
		for (i < 4) {
			putb(val | 0x80);
			val >>= 7;
		}
		putb(val);
	}
	// Set the current position to {npos}.
	def at(npos: int) -> this {
		if (pos > max) max = pos; // remember the maximum pos
		pos = npos;
	}
	// Align the current position to a multiple of {size} bytes.
	def align(size: int) -> this {
		var rem = pos & (size - 1);
		if (rem > 0) skipN(size - rem);
	}
	// Return the maximum position ever accessed.
	def end() -> int {
		if (pos > max) max = pos;
		return max;
	}
	// Set the position to be the end.
	def atEnd() -> this {
		if (pos > max) max = pos;
		else pos = max;
	}
	// Acquire {size} bytes of internal storage.
	def acquire(size: int) -> Array<byte> {
		var nsize = pos + size;
		if (data == null || nsize > data.length) refill(this, nsize);
		return data;
	}
	// Grow the internal storage to be at least 2X bigger.
	private def growI2X(nlength: int) -> this {
		if (data == null) {
			data = Array<byte>.new(10 + nlength);
		} else if (nlength > data.length) {
			data = Arrays.grow(data, data.length * 2 + nlength);
		}
	}
	// Grow the internal storage of this data writer to the new length.
	def grow(nlength: int) -> this {
		if (data == null) data = Array<byte>.new(nlength);
		else if (nlength > data.length) data = Arrays.grow(data, nlength);
	}
	// Copy this data into a new, appropriately-sized array.
	def copy() -> Array<byte> {
		if (data == null) return [];
		return Arrays.copy(data, Array<byte>.new(pos));
	}
	// Extracts all data from this writer, leaving it empty.
	// (This can be more efficient than copy() if the array is sized exactly)
	def extract() -> Array<byte> {
		if (data == null) return [];
		var result = data;
		if (pos != result.length) result = Arrays.copy(result, Array<byte>.new(pos)); // TODO: should this be max?
		data = null;
		pos = 0;
		// TODO: max = 0; ?
		return result;
	}
	// Output the data of this writer to the given function, avoiding an intermediate copy.
	// Note that it is implementation dependent if {f} is called multiple times, e.g. if
	// the internal storage is fragmented.
	def outr<R>(f: Range<byte> -> R) -> R {
		return if(data != null, f(data[0 ... pos])); // TODO: should this be max?
	}
	// Clear all bytes to 0 and reset the position.
	def clear() -> this {
		pos = 0;
		if (data == null) return;
		var x = data;
		for (i < x.length) x[i] = 0;
	}
	// Reset the current data, position, and max.
	def reset(ndata: Array<byte>, npos: int, nmax: int) -> this {
		data = ndata;
		pos = npos;
		max = nmax;
	}
	// Render the data into the given {StringBuilder}.
	def render(baseAddr: int, startPos: int, size: int, buf: StringBuilder) {
		var line = 16;
		for (i = 0; i < size; i = i + line) {
			buf.puts("  ").putx(baseAddr + i);
			buf.puts(": ");
			var start = startPos + i;
			var end = start + line;
			if (end > max) end = max;
			for (i = start; i < end; i++) {
				buf.putx_8(data[i]);
				buf.sp();
			}
			buf.ln();
		}
	}
}

// Optimized utility routines for writing data in byte ranges without the overhead of constructing
// a {Decoder} object. Uses layouts to avoid byte-by-byte writes, both combining multiple bounds
// checks and using native (full word) writes when possible.
component DataWriters {
	def write_range_i8(r: Range<byte>, val: i8)		{ Ref<Layout_i8>.of(r).val = val; }
	def write_range_i16(r: Range<byte>, val: i16)		{ Ref<Layout_i16>.of(r).val = val; }
	def write_range_i32(r: Range<byte>, val: i32)		{ Ref<Layout_i32>.of(r).val = val; }
	def write_range_i64(r: Range<byte>, val: i64)		{ Ref<Layout_i64>.of(r).val = val; }
	def write_range_u8(r: Range<byte>, val: u8)		{ Ref<Layout_u8>.of(r).val = val; }
	def write_range_u16(r: Range<byte>, val: u16)		{ Ref<Layout_u16>.of(r).val = val; }
	def write_range_u32(r: Range<byte>, val: u32)		{ Ref<Layout_u32>.of(r).val = val; }
	def write_range_u64(r: Range<byte>, val: u64)		{ Ref<Layout_u64>.of(r).val = val; }
	def write_range_float(r: Range<byte>, val: float)	{ Ref<Layout_float>.of(r).val = val; }
	def write_range_double(r: Range<byte>, val: double)	{ Ref<Layout_double>.of(r).val = val; }
	def write_range_u128(r: Range<byte>, val: (u64, u64)) {
		var l = Ref<Layout_u128>.of(r);
		l.lo_val = val.0;
		l.hi_val = val.1;
	}
}
