// Copyright 2023 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implementation of the "System" component on WALI.
component System {
	def out = NativeFileStream.new(fs_write, STDOUT);
	def err = NativeFileStream.new(fs_write, STDERR);

	// change the permissions of a file
	def chmod(fileName: string, mode: int) {
		wali.SYS_chmod(pathName(fileName), mode);
	}
	// open a file
	def fileOpen(path: string, read: bool) -> int {
		var mode = if(read, LinuxConst.O_RDONLY, LinuxConst.O_WRONLY | LinuxConst.O_TRUNC | LinuxConst.O_CREAT);
		var fd = wali.SYS_open(pathName(path), mode, 420);
		return if(fd >= 0, int.view(fd), -1);
	}
	// close a file
	def fileClose(fd: int) {
		wali.SYS_close(fd);
	}
	// read a single byte from a file
	def fileRead(fd: int) -> int {
		var buf = Pointer.atContents(iobuf);
		var result = fs_read(fd, buf, 1);
		return if(result == 1, iobuf[0], -1);
	}
	// write some bytes to the file
	def fileWriteK(fd: int, data: Array<byte>, offset: int, len: int) {
		boundsCheck(data, offset, len);
		var buf = Pointer.atContents(data) + offset;
		fs_write(fd, buf, len);
	}
	// read some bytes from the file
	def fileReadK(fd: int, data: Array<byte>, offset: int, len: int) -> int {
		boundsCheck(data, offset, len);
		var buf = Pointer.atContents(data) + offset;
		var result = fs_read(fd, buf, len);
		return result;
	}
	// calculate bytes remaining to be read from file
	def fileLeft(fd: int) -> int {
		// XXX: is there a cheaper way to tell the number of available bytes?
		var offset = wali.SYS_lseek(fd, 0, LinuxConst.SEEK_CUR);
		var end = wali.SYS_lseek(fd, 0, LinuxConst.SEEK_END);
		wali.SYS_lseek(fd, offset, LinuxConst.SEEK_SET);
		return int.!(end - offset);
	}
	// load a file into a byte array
	def fileLoad(fileName: string) -> Array<byte> {
		var path = pathName(fileName);
		if (wali.SYS_stat(path, Pointer.atContents(statbuf)) < 0) return null;
		var r = wali.SYS_open(path, LinuxConst.O_RDONLY, 0);
		if (r < 0) return null;
		var fd = int.!(r);
		var buf = Array<byte>.new(int.!(statbuf[LinuxConst.STAT_WOFF_ST_SIZE]));
		if (wali.SYS_read(fd, Pointer.atContents(buf), u32.!(buf.length)) < 0) return null;
		wali.SYS_close(fd);
		return buf;
	}
	// print a character to standard out
	def putc(ch: byte) {
		numbuf[0] = ch;
		fs_write(STDOUT, Pointer.atContents(numbuf), 1);
	}
	// print an integer (in decimal) to standard out
	def puti(val: int) {
		var i = val;
		if (i == 0) {
			putc('0');
			return;
		}
		var negative = true;
		if (i > 0) {
			negative = false;
			i = 0 - i;
		}
		var pos = numbuf.length;
		while (i != 0) { // XXX: use pointer loop instead?
			var digit = byte.!('0' - i % 10);
			numbuf[--pos] = digit;
			i = i / 10;
		}
		if (negative) numbuf[--pos] = '-';
		fs_write(STDOUT, Pointer.atContents(numbuf) + pos, numbuf.length - pos);
	}
	// print a string (as bytes) to standard out
	def puts(str: string) {
		fs_write(STDOUT, Pointer.atContents(str), str.length);
	}
	// prints a newline character to standard out
	def ln() {
		putc('\n');
	}
	// output an error, stacktrace, and exit
	def error(ex: string, msg: string) {
		def s = Pointer.atContents(ex), s_len = ex.length;
		def m = if(msg != null, Pointer.atContents(msg));
		def m_len = if (msg != null, msg.length);
		// TODO	wave.throw_ex(s, s_len, m, m_len);
	}
	// get ticks in milliseconds
	def ticksMs() -> int {
		wali.SYS_gettimeofday(Pointer.atContents(timeval), Pointer.NULL);
		return int.view(timeval[0] * 1000 + timeval[1] / 1000);
	}
	// get ticks in microseconds
	def ticksUs() -> int {
		wali.SYS_gettimeofday(Pointer.atContents(timeval), Pointer.NULL);
		return int.view(timeval[0] * 1000000 + timeval[1]);
	}
	// get ticks in nanoseconds
	def ticksNs() -> int {
		wali.SYS_gettimeofday(Pointer.atContents(timeval), Pointer.NULL);
		return int.view(timeval[1] * 1000);
	}
	// write some bytes to the file
	def write(fd: int, data: Range<byte>) -> int {
		var buf = Pointer.atContents(data);
		var t = wali.SYS_write(fd, buf, u32.!(data.length));
		return int.!(t);
	}
	// read some bytes from the file
	def read(fd: int, data: Range<byte>) -> int {
		var buf = Pointer.atContents(data);
		var t = wali.SYS_read(fd, buf, u32.!(data.length));
		return int.!(t);
	}
}

// @thread-local @lazy buffer for write integers and chars to System.out
def numbuf = Array<byte>.new(16);
// @thread-local @lazy buffer for write integers and chars to System.out
def iobuf = Array<byte>.new(16);
// @thread-local @lazy buffer for write integers and chars to System.out
def retbuf = Array<byte>.new(16);
// @thread-local @static buffer for gettimeofday
def timeval = Array<long>.new(2);
// @thread-local @static buffer for fstat
def statbuf = Array<long>.new(LinuxConst.STAT_BUF_SIZE / 8);
// @thread-local @lazy buffer for path that don't have space for a null
var pathbuf = Array<byte>.new(100);
// the standard output stream
def STDIN  = 0;
def STDOUT = 1;
def STDERR = 2;

def BCE = "BoundsCheckException";
def EMPTY = "";
def boundsCheck<T>(array: Array<T>, start: int, len: int) {
	if (start < 0) System.error(BCE, EMPTY);
	if (start > array.length) System.error(BCE, EMPTY);
	var end = u32.!(start) + u32.!(len);
	if (end > u32.!(array.length)) System.error(BCE, EMPTY);
}
def fs_write(fd: int, data: Pointer, len: int) -> int {
	var r = wali.SYS_write(fd, data, u32.!(len));
	return int.view(r);
}
def fs_read(fd: int, data: Pointer, len: int) -> int {
	var r = wali.SYS_read(fd, data, u32.!(len));
	return int.view(r);
}
// get a zero-terminated pathname, allocating if necessary
def pathName(fileName: string) -> Pointer {
	if ((fileName.length & 3) == 0) {
		// no extra space on the end of the array for the null byte
		if (pathbuf.length <= fileName.length) pathbuf = Array.new(fileName.length + 5);
		for (i < fileName.length) pathbuf[i] = fileName[i];
		pathbuf[fileName.length] = '\x00';
		return Pointer.atContents(pathbuf);
	}
	return Pointer.atContents(fileName);
}
