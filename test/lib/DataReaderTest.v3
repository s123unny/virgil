// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = LibTests.register("DataReader", _, _);
def X = [
	T("putk", test_putk),
	T("putk_err", test_putk_err),
	T("divest", test_divest),
	T("sleb32", test_i32),
	T("uleb32", test_u32),
	T("sleb32ext", test_i32ext),
	T("uleb32ext", test_u32ext),
	T("sleb64", test_i64),
	T("uleb64", test_u64),
	T("sleb64ext", test_i64ext),
	T("uleb64ext", test_u64ext),
	T("range_32", test_range_32),
	T("range_64", test_range_64),
	T("range_float", test_range_float),
	T("range_double", test_range_double),
	()
];

def test_putk(t: LibTest) {
	// initial buffer = []
	def T = t.asserteq<int>;
	def D = t.asserteq<Array<byte>>;
	def B = t.assert_string;
	var x1: Array<byte> = [];
	var d = DataReader.new(x1);
	T(0, d.pos);
	T(0, d.limit);
	T(0, d.pos_offset);

	// first putk of [0x99]
	var x2: Array<byte> = [0x99];
	d.putk(0, x2, 0, x2.length);
	T(0, d.pos);
	T(1, d.limit);
	T(0, d.pos_offset);
	D(x2, d.data);

	// putk [0x88, 0x99], should copy into new buffer
	var x3: Array<byte> = [0x88, 0x77];
	d.putk(0, x3, 0, x3.length);
	T(0, d.pos);
	T(3, d.limit);
	T(0, d.pos_offset);
	t.assertne(x1, d.data);
	t.assertne(x2, d.data);
	t.assertne(x3, d.data);
	var d3 = d.data;
	B([0x99, 0x88, 0x77], d3);

	// [0x99, 0x88, 0x77] putk [0x33, 0x44]
	//  ^pos  ^limit
	d.atl(d.pos, 1);
	var x4: Array<byte> = [0x33, 0x44];
	d.putk(0, x4, 0, x4.length);
	T(0, d.pos);
	T(3, d.limit);
	T(0, d.pos_offset);
	D(d3, d.data);
	B([0x99, 0x33, 0x44], d.data);

	// [0x99, 0x33, 0x44]
	//        ^pos,     ^limit
	d.at(1);
	var x5: Array<byte> = [0xaa, 0x11, 0x22, 0xbb];
	d.putk(7, x5, 1, 2);
	T(0, d.pos);
	T(4, d.limit);
	T(1, d.pos_offset);
	T(7, d.data.length); // hint should be utilized
	B([0x33, 0x44, 0x11, 0x22, 0, 0, 0], d.data);

	// [x, x, x, x, x, x, x]
	//                     ^pos==limit
	d.atl(7, 7);
	var x6: Array<byte> = [0, 0, 0, 0xcc];
	d.putk(0, x6, 3, 1);
	T(3, d.pos);
	T(4, d.limit);
	T(5, d.pos_offset);
	D(x6, d.data);
}

def test_putk_err(t: LibTest) {
	def T = t.asserteq<int>;
	var x1: Array<byte> = [0x33, 0x44, 0x11, 0x22, 0, 0, 0];
	var d = DataReader.new(x1);
	d.atl(2, 6);
	d.fail_at(1, "msg");

	d.putk(0, [0x77, 0x66], 0, 2);
	T(0, d.pos);
	T(6, d.limit);
	T(2, d.pos_offset);
	T(1, d.error_pos);

	d.putk(0, [0x33], 0, 1);
}

def test_divest(t: LibTest) {
	def T = t.asserteq<int>;
	var x1: Array<byte> = [0x33, 0x44];
	var d = DataReader.new(x1);

	d.divest(0, x1);
	var d1 = d.data;
	t.assertne(x1, d1);
	t.assert_string(x1, d1);

	d.divest(0, x1);
	t.asserteq(d1, d.data);

	d.divest(7, d1);
	var d2 = d.data;
	t.assertne(d1, d2);
	T(7, d2.length);
	T(0, d.pos);
	T(0, d.pos_offset);
	T(2, d.limit);
	t.assert_string([0x33, 0x44, 0, 0, 0, 0, 0], d2);

	d.atl(3, 5);
	d.divest(0, d2);
	T(0, d.pos);
	T(3, d.pos_offset);
	T(2, d.limit);
	var d3 = d.data;
	t.assert_string([0, 0], d3);
}

def assertOk<I>(t: LibTest, f: DataReader -> I, bytes: Array<byte>,
		expected_len: int, expected_val: I) {
	var d = DataReader.new(bytes);
	var result = f(d);
	if (!d.ok) {
		return t.fail2("expected success, got: +%d: %s",
			d.error_pos, d.error_msg);
	}
	if (d.pos != expected_len) {
		return t.fail2("expected length=%d, got: %d",
			expected_len, d.pos);
	}
	if (result != expected_val) {
		return t.fail2("expected result=%d, got: %d",
			expected_val, result);
	}
}
def assertError<I>(t: LibTest, f: DataReader -> I, bytes: Array<byte>) {
	var d = DataReader.new(bytes);
	var result = f(d);
	if (d.ok) t.fail("expected error");
}
// Signed 32-bit LEB unit tests.
def test_i32(t: LibTest) {
	def ok = assertOk(t, DataReader.read_sleb32, _, _, _);
	ok([0x00], 1, 0);
	ok([0x01], 1, 1);
	ok([0x0D], 1, 13);
	ok([0x70], 1, -16);
	ok([0x0F, 0x00], 1, 15);
	ok([0x1F, 0x06], 1, 31);

	ok([0x74], 1, -12);
	ok([0xF3, 0x7F], 2, -13);
	ok([0xF1, 0xFF, 0x7F], 3, -15);

	ok([0xA7, 0x7F], 2, -89);
	ok([0xA7, 0xFF, 0x7F], 3, -89);
	ok([0xA7, 0xFF, 0xFF, 0x7F], 4, -89);
	ok([0xA7, 0xFF, 0xFF, 0x7F], 4, -89);

	ok([0x80, 0x01], 2, 128);
	ok([0x83, 0x80, 0x03], 3, 49155);
	ok([0x83, 0x80, 0x83, 0x00], 4, 49155);
	ok([0x83, 0x80, 0x83, 0x80, 0x00], 5, 49155);

	ok([0b10110000, 0b10010100, 0b11101111, 0b11100111, 0b0011], 5, 1023134256);

	def err = assertError(t, DataReader.read_sleb32, _);
	err([0x80]);
	err([0x8E, 0x8E]);
	err([0x9E, 0x9F, 0x99]);
	err([0xFF, 0xFF, 0xFF, 0xFF]);

	err([0b10110000, 0b10010100, 0b11101111, 0b11100111, 0b10011]);
}
def test_i32ext(t: LibTest) {
	def ok = assertOk(t, DataReader.read_sleb32, _, _, _);
	def err = assertError(t, DataReader.read_sleb32, _);

	ok([0x80, 0x80, 0x80, 0x80, 0x7f], 5, -268435456);
	err([0x81, 0x84, 0x87, 0x8a, 0x08]);
	err([0x82, 0x85, 0x88, 0x8b, 0x09]);
	err([0x83, 0x86, 0x89, 0x8c, 0x10]);
	err([0x8a, 0x8d, 0x89, 0x86, 0x20]);
	err([0x8b, 0x8e, 0x88, 0x85, 0x40]);
	err([0x8b, 0x8e, 0x88, 0x85, 0x70]);
	err([0x8b, 0x8e, 0x88, 0x85, 0x71]);
	err([0x8c, 0x8f, 0x87, 0x84, 0x6e]);

	err([0x83, 0x80, 0x83, 0x80, 0x80, 0x00]);
	err([0xA7, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F]);
	err([0x83, 0x80, 0x83, 0x80, 0x80, 0x01]);
	err([0xA7, 0xFF, 0xFF, 0xFF, 0xFF, 0x7E]);
}

// Unsigned 32-bit LEB unit tests.
def test_u32(t: LibTest) {
	def ok = assertOk(t, DataReader.read_uleb32, _, _, _);
	ok([0x70], 1, 112);
	ok([0xA7, 0x7F], 2, 16295);
	ok([0xA7, 0xFE, 0x7F], 3, 2096935);
	ok([0xA7, 0xFE, 0xFD, 0x7F], 4, 268402471);
	ok([0xA7, 0xF0, 0xF1, 0xF2, 0x0E], 5, 3999037479u);

	def err = assertError(t, DataReader.read_uleb32, _);
	err([0xA7, 0xF0, 0xF1, 0xF2, 0x1E]);
	err([0xA7, 0xF0, 0xF1, 0xF2, 0xFE]);
}
def test_u32ext(t: LibTest) {
	def ok = assertOk(t, DataReader.read_uleb32, _, _, _);
	def err = assertError(t, DataReader.read_uleb32, _);

	ok([0x80, 0x80, 0x80, 0x80, 0x00], 5, 0);
	ok([0x80, 0x80, 0x80, 0x80, 0x01], 5, 0x10000000);
	ok([0x80, 0x80, 0x80, 0x80, 0x07], 5, 0x70000000);
	ok([0x80, 0x80, 0x80, 0x80, 0x0d], 5, 0xd0000000);
	ok([0x80, 0x80, 0x80, 0x80, 0x0f], 5, 0xf0000000);

	err([0x83, 0x86, 0x89, 0x8c, 0x10]);
	err([0x8a, 0x8d, 0x89, 0x86, 0x20]);
	err([0x8b, 0x8e, 0x88, 0x85, 0x40]);
	err([0x8b, 0x8e, 0x88, 0x85, 0x70]);
	err([0x8c, 0x8f, 0x87, 0x84, 0x7e]);

	err([0xA7, 0xF0, 0xF1, 0xF2, 0x8E, 0x00]);
	err([0xA7, 0xF0, 0xF1, 0xF2, 0x80, 0x00]);
	err([0xA7, 0xF0, 0xF1, 0xF2, 0x80, 0x01]);
}
// Signed 64-bit LEB unit tests.
def test_i64(t: LibTest) {
	def ok = assertOk(t, DataReader.read_sleb64, _, _, _);
	ok([0x00], 1, 0);
	ok([0x01], 1, 1);
	ok([0x0D], 1, 13);
	ok([0x70], 1, -16);

	ok([0xA7, 0x7F], 2, -89);
	ok([0xA6, 0xFF, 0x7F], 3, -90);
	ok([0xA5, 0xFF, 0xFF, 0x7F], 4, -91);
	ok([0xA4, 0xFF, 0xFF, 0x7F], 4, -92);
	ok([0xA3, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F], 6, -93);
	ok([0xA3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F], 7, -93);
	ok([0xA3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F], 8, -93);
	ok([0xA3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F], 9, -93);
	ok([0xA3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F], 10, -93);

	ok([0xF4, 0xD2, 0xA6, 0x87, 0x01], 5, 283748724);

	ok([0x81, 0x81, 0x81, 0x81, 0x01], 5, 270549121);
	ok([0x81, 0x82, 0x83, 0x84, 0x05], 5, 1350615297);
	ok([0x81, 0x82, 0x83, 0x84, 0x85, 0x06], 6, 207509045505);
	ok([0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x07], 7, 30993834623233);
	ok([0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x08], 8, 4534593461993729);
	ok([0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x09], 9, 653052939803345153);

	def err = assertError(t, DataReader.read_sleb64, _);
	err([0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x08]);
	err([0xA3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6F]);
}
def test_i64ext(t: LibTest) {
	def ok = assertOk(t, DataReader.read_sleb64, _, _, _);
	def err = assertError(t, DataReader.read_sleb64, _);

	ok([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f], 10, 0x8000000000000000L);
	ok([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00], 10, 0);

	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01]);
	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x02]);
	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x04]);
	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x08]);
	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x10]);
	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x20]);
	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40]);

	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]);
	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x50]);
	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x20]);
	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x30]);

	err([0xA3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F]);
	err([0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x80, 0x01]);
	err([0xA3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7E]);
}
// Unsigned 64-bit LEB unit tests.
def test_u64(t: LibTest) {
	def ok = assertOk(t, DataReader.read_uleb64, _, _, _);
	ok([0x00], 1, 0);
	ok([0x01], 1, 1);
	ok([0x0D], 1, 13);
	ok([0x70], 1, 112);

	ok([0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x09], 9, 653052939803345153);
	ok([0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x00], 10, 653052939803345153);

	def err = assertError(t, DataReader.read_uleb64, _);
	err([0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x02]);
	err([0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x80, 0x01]);
}
def test_u64ext(t: LibTest) {
	def ok = assertOk(t, DataReader.read_uleb64, _, _, _);
	def err = assertError(t, DataReader.read_uleb64, _);

	ok([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01], 10, 0x8000000000000000uL);
	ok([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00], 10, 0);

	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x02]);
	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x04]);
	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x08]);
	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x10]);
	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x20]);
	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40]);

	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80]);
	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x50]);
	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x20]);
	err([0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x30]);

	err([0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x80, 0x00]);
	err([0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x80, 0x01]);
}

def assertVal<I>(t: LibTest, f: Range<byte> -> I, data: Range<byte>, expected_val: I) {
	var result = f(data);
	if (result != expected_val) {
		return t.fail(Strings.format2("expected result=0x%x, got: 0x%x", expected_val, result));
	}
}

def test_range_32(t: LibTest) {
	var data = "\x99\xAA\xBB\xCC\xDD";

	assertVal<u32>(t, DataReaders.read_range_u32, data,		0xCCBBAA99);
	assertVal<u32>(t, DataReaders.read_range_u32, data[1 ...],	0xDDCCBBAA);

	assertVal<u32>(t, DataReaders.read_range_u32_i8, data,		0xFFFFFF99);
	assertVal<u32>(t, DataReaders.read_range_u32_u8, data,		0x00000099);
	assertVal<u32>(t, DataReaders.read_range_u32_i8, data[1 ...],	0xFFFFFFAA);
	assertVal<u32>(t, DataReaders.read_range_u32_u8, data[1 ...],	0x000000AA);

	assertVal<u32>(t, DataReaders.read_range_u32_i16, data,		0xFFFFAA99);
	assertVal<u32>(t, DataReaders.read_range_u32_u16, data,		0x0000AA99);
	assertVal<u32>(t, DataReaders.read_range_u32_i16, data[1 ...],	0xFFFFBBAA);
	assertVal<u32>(t, DataReaders.read_range_u32_u16, data[1 ...],	0x0000BBAA);

	assertVal<i32>(t, DataReaders.read_range_i32, data,		0xCCBBAA99);
	assertVal<i32>(t, DataReaders.read_range_i32, data[1 ...],	0xDDCCBBAA);

	assertVal<i32>(t, DataReaders.read_range_i32_i8, data,		0xFFFFFF99);
	assertVal<i32>(t, DataReaders.read_range_i32_i8, data[1 ...],	0xFFFFFFAA);

	assertVal<i32>(t, DataReaders.read_range_i32_i16, data,		0xFFFFAA99);
	assertVal<i32>(t, DataReaders.read_range_i32_i16, data[1 ...],	0xFFFFBBAA);

}

def test_range_64(t: LibTest) {
	var data = "\x88\x99\xAA\xBB\xCC\xDD\xEE\xFF\x84";

	assertVal<u64>(t, DataReaders.read_range_u64, data,		0xFFEEDDCC_BBAA9988);
	assertVal<u64>(t, DataReaders.read_range_u64, data[1 ...],	0x84FFEEDD_CCBBAA99);

	assertVal<u64>(t, DataReaders.read_range_u64_i8, data,		0xFFFFFFFF_FFFFFF88);
	assertVal<u64>(t, DataReaders.read_range_u64_u8, data,		0x00000000_00000088);
	assertVal<u64>(t, DataReaders.read_range_u64_i8, data[1 ...],	0xFFFFFFFF_FFFFFF99);
	assertVal<u64>(t, DataReaders.read_range_u64_u8, data[1 ...],	0x00000000_00000099);

	assertVal<u64>(t, DataReaders.read_range_u64_i16, data,		0xFFFFFFFF_FFFF9988);
	assertVal<u64>(t, DataReaders.read_range_u64_u16, data,		0x00000000_00009988);
	assertVal<u64>(t, DataReaders.read_range_u64_i16, data[1 ...],	0xFFFFFFFF_FFFFAA99);
	assertVal<u64>(t, DataReaders.read_range_u64_u16, data[1 ...],	0x00000000_0000AA99);

	assertVal<u64>(t, DataReaders.read_range_u64_i32, data,		0xFFFFFFFF_BBAA9988);
	assertVal<u64>(t, DataReaders.read_range_u64_u32, data,		0x00000000_BBAA9988);
	assertVal<u64>(t, DataReaders.read_range_u64_i32, data[1 ...],	0xFFFFFFFF_CCBBAA99);
	assertVal<u64>(t, DataReaders.read_range_u64_u32, data[1 ...],	0x00000000_CCBBAA99);

	assertVal<i64>(t, DataReaders.read_range_i64, data,		0xFFEEDDCC_BBAA9988);
	assertVal<i64>(t, DataReaders.read_range_i64, data[1 ...],	0x84FFEEDD_CCBBAA99);

	assertVal<i64>(t, DataReaders.read_range_i64_i8, data,		0xFFFFFFFF_FFFFFF88);
	assertVal<i64>(t, DataReaders.read_range_i64_i8, data[1 ...],	0xFFFFFFFF_FFFFFF99);

	assertVal<i64>(t, DataReaders.read_range_i64_i16, data,		0xFFFFFFFF_FFFF9988);
	assertVal<i64>(t, DataReaders.read_range_i64_i16, data[1 ...],	0xFFFFFFFF_FFFFAA99);

	assertVal<i64>(t, DataReaders.read_range_i64_i32, data,		0xFFFFFFFF_BBAA9988);
	assertVal<i64>(t, DataReaders.read_range_i64_i32, data[1 ...],	0xFFFFFFFF_CCBBAA99);
}

def test_range_float(t: LibTest) {
	var data = "\x88\x99\xAA\xBB\xCC";

	assertVal<float>(t, DataReaders.read_range_float, data,		float.view(0xBBAA9988));
	assertVal<float>(t, DataReaders.read_range_float, data[1 ...],	float.view(0xCCBBAA99));
}

def test_range_double(t: LibTest) {
	var data = "\x88\x99\xAA\xBB\xCC\xDD\xEE\xFF\x84";

	assertVal<double>(t, DataReaders.read_range_double, data,		double.view(0xFFEEDDCC_BBAA9988));
	assertVal<double>(t, DataReaders.read_range_double, data[1 ...],	double.view(0x84FFEEDD_CCBBAA99));
}
