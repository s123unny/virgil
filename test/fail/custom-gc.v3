//@execute 0=0; 3=12; 1000=1001499501; 10000=1149995001
//@heap-size=1000000

def INITIAL_HEAP_SIZE = 800;

component RiRuntime {
	var gc_calls = 9999;
	def init0() {
		gc_calls = 0;
		// start with a restricted heap
		CiRuntime.heapCurLoc.store(CiRuntime.HEAP_START);
		CiRuntime.heapEndLoc.store(CiRuntime.HEAP_START + INITIAL_HEAP_SIZE);
	}
	def gc(size: int, i: Pointer, sp: Pointer) -> Pointer {
		gc_calls++;
		// allocate the object
		var result = CiRuntime.heapCurLoc.load<Pointer>();
		CiRuntime.heapCurLoc.store<Pointer>(result + size);
		// allow allocations to end of heap
		CiRuntime.heapEndLoc.store(CiRuntime.HEAP_END);
		return result;
	}
}


class P(x: int, y: int) {
	def sum() -> int { return x + y; }
}

def main(a: int) -> int {
	RiRuntime.init0();
	var sum = 0;
	for (i < a) sum += P.new(i, a).sum();
	return sum + if(RiRuntime.gc_calls > 0, 1000000001, 0);
}
