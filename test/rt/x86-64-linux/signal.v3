def main(a: Array<string>) -> int {
	System.puts(">1\n");
	tryDivZero();
	System.puts("##-fail: did not catch signal\n");
	return -1;
}

def tryDivZero() {
	System.puts("##+try-divide-by-zero\n");
	RiRuntime.userSignalHandler = handleSignal;
	
	for (y in [1, 0]) {
		if (1 / y == -1) return;
	}
}

def SIGFPE = 8;
def SYS_exit = 60;
def SYS_rt_sigreturn = 15;
def ucontext_rip_offset = 168;
def ucontext_rsp_offset = 160;

def handleSignal(signum: int, siginfo: Pointer, ucontext: Pointer) -> bool {
	System.puts("  handleSignal ");
	System.puti(signum);
	System.ln();
	if (signum != SIGFPE) return false;
	var t: (Pointer, void) = CiRuntime.unpackClosure(ok);
	// adjust IP to point to {ok} function
	System.puts("    bump IP\n");
	(ucontext + ucontext_rip_offset).store<Pointer>(t.0);
	return true;
}

def ok() -> int {
	System.puts("##-ok\n");
	Linux.syscall(SYS_exit, 0);
	return 0;
}