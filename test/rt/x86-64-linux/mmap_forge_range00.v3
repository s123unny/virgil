// TODO: factor out this test to work with mmap on other platforms
def mmap(addr: Pointer, size: u64) -> Pointer {
	var flags = LinuxConst.MAP_PRIVATE | LinuxConst.MAP_ANONYMOUS;
	var prot = LinuxConst.PROT_READ | LinuxConst.PROT_WRITE;
	var r = Linux.syscall(LinuxConst.SYS_mmap, (Pointer.NULL, size, prot, flags, 0, 0));
	if (r.0 == -1) return Pointer.NULL;
	var start = Pointer.NULL + r.0, end = start + i64.view(size);
	return start;
}

layout WordViews {
        +0	b1: u8;
        +4	b2: u16;
        +8	b3: u32;
        +16	b4: u64;
        =24;
}

def run_range_test(p: Pointer, size: u64, r1: Range<byte>) -> int {
	var r2 = CiRuntime.forgeRange<byte>(p, int.!(size));

	if (r1 != r2) return 1;
	if (r1.length != size) return 2;
	if (Pointer.atContents(r1) != p) return 3;
	if (Pointer.atContents(r2) != p) return 4;

	r1[0] = 99;
	if (r2[0] != 99) return 5;

	for (i < r1.length) r1[i] = byte.view(-77 + i);
	for (i < r2.length) if (r2[i] != byte.view(-77 + i)) return 6;

	for (i < size) r2[i] = byte.view(33u + i);
	for (i < size) if (r1[i] != byte.view(33u + i)) return 7;


	var words1 = Ref<WordViews>.of(r1);
	var words2 = Ref<WordViews>.of(r2);

	if (words1 != words2) return 8;

	words1.b1 = 55;
	if (words2.b1 != 55) return 9;

	words1.b2 = 5566;
	if (words2.b1 != 55) return 10;
	if (words2.b2 != 5566) return 11;

	words1.b3 = 0x778899AA;
	if (words2.b1 != 55) return 12;
	if (words2.b2 != 5566) return 13;
	if (words2.b3 != 0x778899AA) return 14;

	for (i < 100) {
		var r1b = r1[i ...];
		var r2b = r2[i ...];
		if (r1b != r2b) return 15;
		if (Pointer.atContents(r1b) != (p + i)) return 16;

		var words1b = Ref<WordViews>.of(r1b);
		
		words1b.b2 = 0xAB98;
		if (words1b.b2 != 0xAB98) return 17;

		words1b.b3 = 0xF677BA89u;
		if (words1b.b3 != 0xF677BA89u) return 18;

		words1b.b4 = 0xFEDDAAAA_F765BADDu;
		if (words1b.b4 != 0xFEDDAAAA_F765BADDu) return 19;
	}

	return 0;
}

def main() -> int {
	def PAGE_SIZE = 4096u;
	var iteration = 1;
	for (addr = 0xF_0000_0000uL; addr != 0; (addr <<= 4, iteration++)) {
		System.puts("##+iteration ");
		System.puti(iteration);
		System.ln();
		
		var size = PAGE_SIZE * 10u;
		var p = mmap(Pointer.NULL + long.view(addr), size);
		if (p == Pointer.NULL) return 0 - iteration;
		var r1 = CiRuntime.forgeRange<byte>(p, int.!(size));
		var code = run_range_test(p, size, r1);
		if (code != 0) return (iteration << 6) | code;

		System.puts("##-ok\n");
	}
	return 0;
}
