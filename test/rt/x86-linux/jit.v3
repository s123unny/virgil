class X { }

def TESTS = [
	("alloc", alloc),
	("nop", test_nop),
	("const", test_const),
	("param0", test_param0),
	("param1", test_param1),
	("param2", test_param2),
	("add", test_add)
];

var code: Pointer;

def main() -> int {
	System.puts("##>");
	System.puti(TESTS.length);
	System.ln();
	var ret = 0;
	for (p in TESTS) {
		System.puts("##+");
		System.puts(p.0);
		System.ln();
		var r = p.1();
		if (r) {
			System.puts("##-ok\n");
		} else {
			System.puts("##-fail\n");
			ret++;
		}
	}
	return ret;
}

def mmap_arg = Array<int>.new(LinuxConst.MMAP_ARG_SIZE);
def hexMap = "0123456789ABCDEF";
def alloc() -> bool {
	var size = 4096;
	var p = Pointer.atContents(mmap_arg);
	var prot = LinuxConst.PROT_READ | LinuxConst.PROT_WRITE | LinuxConst.PROT_EXEC;
	var flags = LinuxConst.MAP_PRIVATE | LinuxConst.MAP_ANONYMOUS;
	(p + LinuxConst.MMAP_ARG_ADDR).store(0);
	(p + LinuxConst.MMAP_ARG_LEN).store(size);
	(p + LinuxConst.MMAP_ARG_PROT).store(prot);
	(p + LinuxConst.MMAP_ARG_FLAGS).store(flags);
	(p + LinuxConst.MMAP_ARG_FD).store(0);
	(p + LinuxConst.MMAP_ARG_OFFSET).store(0);
	var r = Linux.syscall(LinuxConst.SYS_mmap, p);
	if (r.0 == -1) return false;
	code = Pointer.NULL + r.0;

	System.puts("code = 0x");
	var v = r.0;
	for (i < 8) {
		var n = (v >> 28) & 0xF;
		System.putc(hexMap[n]);
		v = v << 4;
	}
	System.ln();
	return true;
}

def write(b: Array<byte>) -> Pointer {
	var ptr = code;
	for (i < b.length) {
		code.store<byte>(b[i]);
		code += 1;
	}
	return ptr;
}

def test_nop() -> bool {
	var addr = write([0xc3/*ret*/]);
	var func = CiRuntime.forgeClosure<X, void, void>(addr, null);
	func();
	return true;
}

def test_const() -> bool {
	var addr = write([
		0xB8, 0x42, 0x00, 0x00, 0x00,	// mov eax, 42
		0xc3				// ret
	]);
	var func = CiRuntime.forgeClosure<X, void, int>(addr, null);
	var r = func();
	return r == 0x42;
}

def test_param0() -> bool {
	var x = X.new();
	var addr = write([
		0x89, 0xF8, 	// mov eax, edi
		0xc3		// ret
	]);
	var func = CiRuntime.forgeClosure<X, void, X>(addr, x);
	var r = func();
	return r == x;
}

def test_param1() -> bool {
	var addr = write([
				// mov eax, eax
		0xc3		// ret
	]);
	var func = CiRuntime.forgeClosure<X, int, int>(addr, null);
	return func(42) == 42 && func(99) == 99;
}

def test_param2() -> bool {
	var addr = write([
		0x89, 0xd0, 	// mov eax, edx
		0xc3		// ret
	]);
	var func = CiRuntime.forgeClosure<X, (int, int), int>(addr, null);
	return func(43, 42) == 42 && func(98, 99) == 99;
}

def test_add() -> bool {
	var addr = write([
		0x01, 0xd0, 	// add eax, edx
		0xc3		// ret
	]);
	var func = CiRuntime.forgeClosure<X, (int, int), int>(addr, null);
	return func(43, 42) == 85 && func(98, 99) == 197;
}
