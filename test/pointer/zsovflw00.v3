//@execute = 0
def kernelbuf = Array<long>.new(4);
def START = 0x8001000;
def END = 0x8008000;

var error = 0;

def main() -> int {
	initStackRedZone(Pointer.NULL + START, Pointer.NULL + END);
	return error;
}

def cast<T, A>(t: T) -> A {
	return A.!(t);
}
def syscall<T>(num: int, args: T) -> int {
	match (num) {
		LinuxConst.SYS_mprotect => {
			var t = cast<T, (Pointer, int, int)>(args);
			return 0;
		}
		LinuxConst.SYS_sigaltstack => {
			var t = cast<T, (Pointer, Pointer)>(args);
			if (t.0 != Pointer.atContents(kernelbuf)) return error = 11;
			if (t.1 != Pointer.NULL) return error = 12;
			if (kernelbuf[0] != START) return error = 13;
		}
	}
	return 0;
}

// initialize stack red zone for handling stack overflow
def initStackRedZone(start: Pointer, end: Pointer) -> (Pointer, Pointer) {
	var delta = end - start;
	def PAGE_SIZE = 4 * 1024;
	if (delta < (3 * PAGE_SIZE)) return (Pointer.NULL, Pointer.NULL); // not enough space for red zone
	// | alt stack | red zone |     usable stack   |
	// ^ start                                     ^end
	def ALT_SIZE = PAGE_SIZE;
	var red_start = start + ALT_SIZE;
	var red_end = red_start + PAGE_SIZE;
	// mprotect a page PROT_NONE to serve as red zone for stack overflow
	syscall(LinuxConst.SYS_mprotect, (red_start, PAGE_SIZE, LinuxConst.PROT_NONE));
	
	// set up alternate signal stack (using pages below red zone)
	kernelbuf[0] = start - Pointer.NULL;	// start
	kernelbuf[1] = 0;			// flags
	kernelbuf[2] = ALT_SIZE;		// size
	syscall(LinuxConst.SYS_sigaltstack, (Pointer.atContents(kernelbuf), Pointer.NULL));
	return (red_start, red_end);
}

component LinuxConst {
	def SYS_mprotect = 10;
	def SYS_sigaltstack = 131;
	def PROT_NONE = 0x0;
}

