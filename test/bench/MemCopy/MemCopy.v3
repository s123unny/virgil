// benchmark for copying memory vs copying arrays
component memcpy {
	def BYTES: int = 10 * 1024 * 1024;
	def INTS: int = BYTES / 4;
	def WORDS: int = BYTES / Pointer.SIZE;
	def main(args: Array<string>) {
		System.puts("Memcopy benchmark: ");
		System.puti(BYTES / 1024 / 1024);
		System.puts("MB array size\n");
		{
		var src = fillByte(Array<byte>.new(BYTES)), dst = Array<byte>.new(BYTES);
		repeat(10, "arrayCopy<byte>", arrayCopy<byte>, (src, dst));
		repeat(10, "memCopy", memCopy, (Pointer.atContents(dst), Pointer.atContents(src), WORDS));
		repeat(10, "memCopy2", memCopy2, (Pointer.atContents(dst), Pointer.atContents(src), WORDS));
		repeat(10, "memCopy4", memCopy4, (Pointer.atContents(dst), Pointer.atContents(src), WORDS));
		}
		{
		var src = fillInt(Array<int>.new(INTS)), dst = Array<int>.new(INTS);
		repeat(10, "arrayCopy<int>", arrayCopy<int>, (src, dst));
		repeat(10, "memCopy", memCopy, (Pointer.atContents(dst), Pointer.atContents(src), WORDS));
		repeat(10, "memCopy2", memCopy2, (Pointer.atContents(dst), Pointer.atContents(src), WORDS));
		repeat(10, "memCopy4", memCopy4, (Pointer.atContents(dst), Pointer.atContents(src), WORDS));
		}
	}
	def fillInt(src: Array<int>) -> Array<int> {
		for (i = 0; i < src.length; i++) {
			src(i) = 31 * i + src.length;
		}
		return src;
	}
	def fillByte(src: Array<byte>) -> Array<byte> {
		for (i = 0; i < src.length; i++) {
			src(i) = byte.!(33 * i + src.length);
		}
		return src;
	}
	def arrayCopy<T>(src: Array<T>, dst: Array<T>) -> Array<T> {
		var max = src.length;
		for (i = 0; i < max; i++) dst(i) = src(i);
		return dst;
	}
	def memCopy(dest: Pointer, src: Pointer, size: int) {
		var end = src.add(size);
		while (src.lt(end)) { // XXX: manual loop unrolling?
			dest.store(src.load<Pointer>());
			src = src.add(Pointer.SIZE);
			dest = dest.add(Pointer.SIZE);
		}
	}
	def memCopy2(dest: Pointer, src: Pointer, size: int) {
		var end = src.add(size);
		while (src.lt(end)) { // unrolled 2x
			dest.store(src.load<Pointer>());
			dest.add(Pointer.SIZE).store(src.add(Pointer.SIZE).load<Pointer>());
			src = src.add(Pointer.SIZE * 2);
			dest = dest.add(Pointer.SIZE * 2);
		}
	}
	def memCopy4(dest: Pointer, src: Pointer, size: int) {
		var end = src.add(size);
		while (src.lt(end)) { // unrolled 2x
			dest.store(src.load<Pointer>());
			dest.add(Pointer.SIZE).store(src.add(Pointer.SIZE).load<Pointer>());
			dest.add(Pointer.SIZE * 2).store(src.add(Pointer.SIZE * 2).load<Pointer>());
			dest.add(Pointer.SIZE * 3).store(src.add(Pointer.SIZE * 3).load<Pointer>());
			src = src.add(Pointer.SIZE * 4);
			dest = dest.add(Pointer.SIZE * 4);
		}
	}
	def repeat<A, B>(times: int, op: string, f: A -> B, a: A) {
		var total = 0;
			System.puts("Timing ");
			System.puts(op);
			System.puts("...");
		for (i = 0; i < times; i++) {
			var before = System.ticksUs();
			var r = f(a);
			var after = System.ticksUs();
			var diff = after - before;
			System.puti(diff);
			System.puts(" ");
			total = total + diff;
		}
		System.puts("\nAverage ");
		System.puts(op);
		System.puts(": ");
		System.puti(total / times);
		System.puts(" us\n");
	}
}
