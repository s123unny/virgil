//@execute 0=0

enum TrapReason {
	NONE,
	EXIT,
	UNREACHABLE,
	MEM_OUT_OF_BOUNDS,
	DIV_BY_ZERO,
	DIV_UNREPRESENTABLE,
	FLOAT_UNREPRESENTABLE,
	FUNC_INVALID,
	FUNC_SIG_MISMATCH,
	DATA_SEGMENT_DROPPED,
	ELEM_SEGMENT_DROPPED,
	TABLE_OUT_OF_BOUNDS,
	STACK_OVERFLOW,
	NULL_DEREF,
	UNIMPLEMENTED,
	ARRAY_INDEX_OOB,
	OOM,
	FAILED_CAST,
	INVALID_OPCODE,
	TIMEOUT,
	NO_EXPORTED_MEM,
	BREAK,
	ERROR
}

type MaybeTrap<T>(result: T, reason: TrapReason) #unboxed {
}

def OOB_RANGE = MaybeTrap<Range<byte>>(null, TrapReason.MEM_OUT_OF_BOUNDS);
class Memory(data: Range<byte>) {
	// Get a range of memory from [offset ..+ size], if possible (32-bit)
	def range_ol_32(index: u32, size: u32) -> MaybeTrap<Range<byte>> {
		var pos = u64.!(index);
		var end = pos + u64.!(size);
		if (end > u64.view(data.length)) return OOB_RANGE;
		return MaybeTrap(data[pos ..+ size], TrapReason.NONE);
	}
}

var mem0 = Memory.new("arf");
var mem1 = Memory.new("zUDDD");

def main(a: u32) -> int {
	var r0 = mem0.range_ol_32(a, a + 2);
	var r1 = mem1.range_ol_32(a + 2, a + 3);
	return 0;
}
