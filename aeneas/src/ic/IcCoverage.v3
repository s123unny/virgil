// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// a code-coverage analyzer for IC code
class IcCoverage(compiler: Compiler, prog: Program, instr: bool) {
	var icmList: List<IcMethod>;

	// every time an IcMethod is generated, probe all its instructions
	def onGen(memberRef: IrSpec, icm: IcMethod) {
		icmList = List.new(icm, icmList);
		for (i < icm.iccode.length) {
			icm.addProbeBefore(i, fire);
		}
	}
	// fire, removing this probe from the instruction
	def fire(i: IcInterpreter, probeIp: int) {
		i.getTopMethod().removeProbeBefore(probeIp, fire);
	}
	// count the number of executed instructions in this method
	def count(icm: IcMethod) -> int {
		var executed = 0, code = icm.iccode, m = fire;
		for (i < code.length) {
			if (wasExecuted(icm, i)) executed = executed + 1;
		}
		return executed;
	}
	def wasExecuted(icm: IcMethod, ip: int) -> bool {
		var c = icm.iccode[ip];
		if (IcInstr.Probe.?(c)) {
			// if the probe is still active, it was not executed
			for (l = IcInstr.Probe.!(c).probes.before; l != null; l = l.tail) {
				if (l.head == fire) return false;
			}
		}
		return true;
	}
	// get the percentage of coverage of the method
	def percent(icm: IcMethod) -> (IcMethod, int) {
		return (icm, (count(icm) * 100) / icm.iccode.length);
	}
	def report() {
		var array = Arrays.map(Lists.toArray(icmList), percent);
		array = Arrays.sort(array, 0, array.length, cmp);
		for (e in array) print(e);
	}
	def cmp(a: (IcMethod, int), b: (IcMethod, int)) -> bool {
		return b.1 < a.1;
	}
	def print(m: IcMethod, percent: int) {
		if (percent < 100) Terminal.sp();
		if (percent < 10)  Terminal.sp();
		Terminal.cyan("%d", percent);
		Terminal.put("% ");
		if (percent < 100) Terminal.yellow("%q", m.memberRef.render);
		else Terminal.green("%q", m.memberRef.render);
		Terminal.ln();
		if (percent < 100 && instr) {
			var printer = IcPrinter.new(null);
			printer.indent = 2;
			for (i < m.iccode.length) {
				var buf = TerminalBuffer.new();
				if (!wasExecuted(m, i)) buf.red();
				printer.render(buf, i, m.iccode[i]);
				buf.end().outt();
			}
		}
	}
}
