// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// This class provides profiling infrastructure for Ic code,
// include per-method profiling.
class IcTreeProfiler extends TreeProfiler<IcFrame> {
	// instrument the entry instruction and each return instruction
	def onGen(memberRef: IrSpec, icm: IcMethod) {
		// do per-method CCT profiling
		for (i < icm.iccode.length) {
			var j = icm.iccode[i];
			if (IcInstr.Ret.?(j)) icm.addProbeBefore(i, pmOnRet);
		}
		icm.addProbeBefore(0, pmOnEntry);
	}
	// create a new node in the profiling tree if necessary and start an interval
	def pmOnEntry(i: IcInterpreter, probeIp: int) {
		var time = System.ticksUs();
		var topFrame = i.topFrame;
		if (topFrame != curNode.frame) {
			onEntry(topFrame.icm.memberRef.asMethod(), time);
		}
	}
	// record the elapsed time for the method and move to parent node
	def pmOnRet(i: IcInterpreter, probeIp: int) {
		onRet(System.ticksUs());
	}
}

// Instruction profiler for Ic code.
class IcInstrProfiler {
	def prog: Program;
	def profMap = HashMap<IcMethod, IcMethodProf>.new(IcMethod.uid, IcMethod.==);
	def profSeq = Vector<IcMethodProf>.new();
	var curProf: IcMethodProf;		// current profiling information
	var curFrame: IcFrame;			// current frame
	var printer: IcPrinter;

	new(compiler: Compiler, prog) {
	}
	def onGen(memberRef: IrSpec, icm: IcMethod) {
		// do per-instruction profiling
		var len = icm.iccode.length, pm = IcMethodProf.new(icm);
		profMap[icm] = pm;
		profSeq.put(pm);
		for (i < len) {
			var ic = icm.iccode[i];
			if (IcInstr.Ret.?(ic)) icm.addProbeAfter(i, afterReturn);
			else if (IcInstr.Branch.?(ic)) icm.addProbeAfter(i, afterBranch);
			else if (IcInstr.Switch.?(ic)) icm.addProbeAfter(i, afterBranch);
		}
		if (len > 0) icm.addProbeBefore(0, beforeEntry);
	}
	// check whether the apply resulted in a call to a new method
	def beforeEntry(i: IcInterpreter, probeIp: int) {
		if (i.topFrame != curFrame) {
			if (curProf != null) curProf.recordCall(i.topFrame.retIp, i.topFrame.icm.memberRef.asMethod());
			curFrame = i.topFrame;
			curProf = profMap[curFrame.icm];
			curProf.icount[0]++;
			curProf.calls++;
		}
	}
	def afterBranch(i: IcInterpreter, probeIp: int) {
		// record branch target count and increment block count
		var targetIp = i.ip;
		curProf.icount[targetIp]++;
		curProf.recordBranch(probeIp, targetIp);
	}
	def afterReturn(i: IcInterpreter, probeIp: int) {
		// pop the current frame
		curFrame = i.topFrame;
		if (curFrame == null) curProf = null;
		else curProf = profMap[curFrame.icm];
	}
	def report() {
		printer = IcPrinter.new(null);
		printer.successors = false;
		profSeq.apply(computeInstrTotal);
		var r = Arrays.sort(profSeq.array, 0, profSeq.length, IcMethodProf.byTotal);
		for (e in r) reportInstrCount(e);
	}
	def computeInstrTotal(pm: IcMethodProf) {
		foreachBlock(pm, addTotal);
	}
	def addTotal(pm: IcMethodProf, range: (int, int), count: int) {
		pm.total = pm.total + count * (range.1 - range.0);
	}
	def reportInstrCount(pm: IcMethodProf) {
		Terminal.green("%s", Strings.render(pm.icm.memberRef.render));
		var count = pm.icount, total = pm.total;
		var first = count[0], same = true;
		for (c in count) if (c != first) same = false;
		Terminal.put2(": %d invocations, %d instructions\n", pm.calls, total);
		foreachBlock(pm, printBlock);
	}
	def printBlock(pm: IcMethodProf, range: (int, int), count: int) {
		var buf = TerminalBuffer.new();
		if (count == 0) buf.red();
		for (i = range.0; i < range.1; i++) {
			if (i == range.0) buf.puts(" x ").putd(count).pad(' ', 12);
			else buf.puts("            ");
			var ic = pm.icm.iccode[i];
			if (IcInstr.Probe.?(ic)) ic = IcInstr.Probe.!(ic).orig;
			printer.render(buf, i, ic);
			if (pm.bcount != null && pm.bcount[i] != null) {
				// print branch->target information
				var bcount = pm.bcount[i];
				for (j = 0; j < bcount.length; j = j + 2) {
					buf.puts("                 x ").putd(bcount[j+1]);
					buf.puts(" -> @").putd(bcount[j]);
					buf.ln();
				}
			}
		}
		buf.end();
		buf.outt();
	}
	def foreachBlock(pm: IcMethodProf, f: (IcMethodProf, (int, int), int) -> void) {
		var i = 0, iccode = pm.icm.iccode, max = iccode.length;
		while (i < max) {
			var start = i;
			while (i++ < max) {
				if (isBlockEnd(iccode[i - 1]) || i == max) {
					f(pm, (start, i), pm.icount[start]);
					break;
				}
			}
		}
	}
	def isBlockEnd(i: IcInstr) -> bool {
		match (i) {
			Probe(orig, probes) => return isBlockEnd(orig);
			Branch, Switch, Throw, Ret => return true;
			_ => return false;
		}
	}
}
// per-method information for instruction profiler
class IcMethodProf(icm: IcMethod) {
	var calls: int;			// invocation count
	var total: int;			// total instruction count
	var icount: Array<int>;		// per-instruction count
	var bcount: Array<Array<int>>;	// per-branch, per-target count
	new() {
		icount = Array.new(icm.iccode.length);
	}
	def recordBranch(branchLoc: int, target: int) {
		if (bcount == null) bcount = Array.new(icm.iccode.length);
		var bc = bcount[branchLoc];
		if (bc == null) {
			// first time this branch was executed
			bc = bcount[branchLoc] = Array.new(2);
			bc[0] = target;
			bc[1] = 1;
			return;
		}
		for (i = 0; i < bc.length; i = i + 2) {
			if (bc[i] == target) {
				// found an entry for this target
				bc[i + 1]++;
				return;
			}
		}
		// allocate a new entry at the end
		bc = bcount[branchLoc] = Arrays.grow(bc, bc.length + 2);
		bc[bc.length - 2] = target;
		bc[bc.length - 1] = 1;
	}
	def recordCall(callLoc: int, target: IrMethod) {
		// do nothing for now
	}
	def byTotal(that: IcMethodProf) -> bool {
		return this.total < that.total;
	}
	def byCalls(that: IcMethodProf) -> bool {
		return this.calls < that.calls;
	}
}
