// Copyright 2023 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

enum DbgCommand(cmdName: string, alias: string, help: string) {
	Help("help", "h", "Print help text"),
	Run("run", "r", "Begin program"),
	Continue("continue", "c", "Continue program"),
	Step("step", "s", "Step program until it reaches a different source line"),
	Stepi("stepi", "si", "Step one instruction exactly"),
	Next("next", "n", "Step program, jumping over calls"),
	Nexti("nexti", "ni", "Step one instruction, jumping over calls"),
	Finish("finish", "fin", "Execute until selected stack frame returns"),
	Info("info", "info", "Show breakpoints or locals. Type \"help info\" for more help"),
	Breakpoint("breakpoint", "b", "Making program stop at certain line: <fileName> <line>"),
	DisableBreakpoint("disable", "disable", "Enable breakpoint by <index>"),
	EnableBreakpoint("enable", "enable", "Disable breakpoint by <index>"),
	Backtrace("backtrace", "bt", "Print a backtrace"),
	Source("source", "source", "Print source with execution result along with a <line number>"),
	Display("display", "display", "Print information during steping program. Type \"help display\" for more help"),
	Undisplay("undisplay", "undisplay", "Don't print information during steping program"),
	Quit("quit", "q", "Quit the debugger"),
	Unknown("unknown", "unknown", ""),
}
enum DbgInfo(cmdName: string, alias: string, help: string) {
	Breakpoints("breakpoints", "b", "Print information about breakpoints"),
	Locals("locals", "l", "Print information about nonSsa-locals when next instr is a Checkpoint"),
	Inputs("inputs", "i", "Print information about inputs of next instruction"),
	Invalid("invalid", "invalid", "")
}
enum DbgDisplay(cmdName: string, alias: string, help: string) {
	Trace("trace", "t", "Trace execution for each instruction"),
	Source("source", "s", "Print source after each stepping instruction"),
	CalleeSource("callee-source", "ss", "Print callee's source as well"),
	Invalid("invalid", "invalid", ""),
}

def PRINT_LIMIT = 30;

// Implement a GDB-like interface debugger based on SsaInterpreter
class SsaDebugger(prog: Program, interp: SsaInterpreter) {
	def parser = DebuggerParser.new();
	def bps = Vector<Breakpoint>.new();
	def printer = SsaPrinter.new();
	def srcPrinter = SrcPrinter.new(prog.vst.files, interp);
	var fileMethods: Array<Vector<VstMethod>>;
	var startDel: Closure;
	var startArgs: Array<Val>;
	var running: bool;

	def invoke(del: Closure, args: Array<Val>) -> Result {
		startDel = del;
		startArgs = args;
		init();
		Terminal.put("For help, type \"help\".\n");
		var readCommand = true;
		while (readCommand) {
			var result = parser.parseCommand(parser.getCommand());
			readCommand = handleCommand(result);
		}
		return null;
	}
	def init() {
		fileMethods = Array<Vector<VstMethod>>.new(prog.files.length);
		for (i < fileMethods.length) {
			var vstFile = prog.vst.files[i];
			fileMethods[i] = Vector<VstMethod>.new();
			if (vstFile.synthetic != null) addMethods(i, vstFile.synthetic.members);
			for (i < vstFile.classes.length) {
				addMethods(i, vstFile.classes[i].members);
			}
			for (i < vstFile.components.length) {
				addMethods(i, vstFile.components[i].members);
			}
		}
	}
	def addMethods(i: int, members: List<VstMember>) {
		for (l = members; l != null; l = l.tail) {
			if (VstMethod.?(l.head)) fileMethods[i].put(VstMethod.!(l.head));
		}
	}
	def handleCommand(command: DbgCommand, args: string) -> bool {
		match (command) {
			Help => printHelp(args);
			Run => {
				start();
				execute(true, false, false, false);
			}
			Continue => execute(true, false, false, false);
			Step => execute(false, true, false, false);
			Stepi => execute(false, false, false, false);
			Next => execute(false, true, true, false);
			Nexti => execute(false, false, true, false);
			Finish => execute(false, false, false, true);
			Info => {
				var info = parser.parseInfo(args);
				match (info) {
					Breakpoints => {
						for (i < bps.length) Terminal.put2("%d: %q\n", i, bps[i].render);
					}
					Locals => infoLocals();
					Inputs => infoInputs();
					Invalid => Terminal.put1("Invalid info args: %s\n", args);
				}
			}
			Breakpoint => {
				var result = parser.parseBreakpoint(args);
				if (result.0.length > 0 && insertBreakpoint(result)) {
					var idx = bps.length-1, ssa = bps[idx].ssa;
					Terminal.put2("Breakpoint %d %q\n", idx, ssa.source.render);
				} else Terminal.put1("Invalid breakpoint args: %s\n", args);
			}
			DisableBreakpoint => {
				handleBreakpoint(args, false);
			}
			EnableBreakpoint => {
				handleBreakpoint(args, true);
			}
			Backtrace => {
				if (running) {
					var source: Source;
					if (SsaCheckpoint.?(interp.frame.ip)) source = SsaCheckpoint.!(interp.frame.ip).source;
					var trace = interp.getStackTrace(source);
					for (list = trace; list != null; list = list.tail) {
						for (s = list.head; s != null; s = s.tail) {
							Terminal.put1("\t%q\n", s.render);
						}
					}
				}
			}
			Source => {
				var result = parser.parseInt(args);
				if (result == INVALID) Terminal.put1("Invalid source args: %s\n", args);
				else srcPrinter.outN(result);
			}
			Display => {
				var display = parser.parseDisplay(args);
				match (display) {
					Trace => interp.setTrace(true);
					Source => srcPrinter.set(true);
					CalleeSource => srcPrinter.traceCallee = true;
					Invalid => {}
				}
			}
			Undisplay => {
				var display = parser.parseDisplay(args);
				match (display) {
					Trace => interp.setTrace(false);
					Source => srcPrinter.set(false);
					CalleeSource => srcPrinter.traceCallee = false;
					Invalid => Terminal.put1("Invalid display args: %s\n", args);
				}
			}
			Unknown => {
				Terminal.put("Unknown command\n");
			}
			Quit => {
				return false;
			}
		}
		return true;
	}
	def start() {
		interp.reset();
		Terminal.put1("Starting program: %s\n", interp.prog.name());
		interp.pushFrame(startDel.memberRef, startDel.val, startArgs);
		running = true;
	}
	def execute(untilBreak: bool, nextLine: bool, jump: bool, fin: bool) {
		if (!running) start(); // ???: start or return?
		var targetSp = interp.sp, prevSp = interp.sp;
		var prev = interp.frame.ip;
		var n = interp.step(interp.frame.ip);
		if (interp.frame == null) {
			running = false;
			printExecuteResult();
			return;
		}
		srcPrinter.putData(prev, prevSp, targetSp);
		interp.frame.ip = n;
		while (!stopExecute(n, untilBreak, nextLine, jump, fin, targetSp)) {
			prev = interp.frame.ip;
			prevSp = interp.sp;
			n = interp.step(interp.frame.ip);
			// Only putData if it is not a call instruction (no result yet)
			srcPrinter.putData(prev, prevSp, targetSp);
			if (interp.frame == null) {
				running = false;
				break;
			}
			interp.frame.ip = n;
		}
		if (srcPrinter.on) srcPrinter.out();
		printExecuteResult();
	}
	def stopExecute(instr: SsaInstr, untilBreak: bool, nextLine: bool, jump: bool, fin: bool, targetSp: int) -> bool {
		if (isBreakpoint(instr)) return true;
		if (untilBreak) return false;
		if (fin) {
			if (interp.sp < targetSp) return true;
			else return false;
		} 
		if (!nextLine && !jump) return true;
		if (jump && interp.sp > targetSp) return false;
		if (!nextLine || (nextLine && SsaCheckpoint.?(instr))) return true;
		return false;
	}
	def isBreakpoint(instr: SsaInstr) -> bool {
		if (!SsaCheckpoint.?(instr)) return false;
		var checkpoint = SsaCheckpoint.!(instr);
		if (checkpoint.breakpoint) return true;
		else return false;
	}
	def printExecuteResult() {
		if (interp.frame != null) {
			for (j < interp.sp-1) printer.buf.puts("  ");
			printer.buf.blue().puts("=>").end();
			printer.printInstr(interp.frame.ip, false, true, false, false);
			printer.outln();
		} else {
			var result = if (interp.exception == null, interp.retVal, interp.exception);
			var rettype = interp.prog.getMain().getReturnType();
			printer.buf.puts("Program exited: ");
			V3.renderResult(result, rettype, printer.buf);
			printer.outln();
		}
	}
	def infoLocals() {
		if (!running || !SsaCheckpoint.?(interp.frame.ip)) return;
		var nonSsaVars = interp.frame.meth.source.nonSsaVars;
		var inputs = interp.frame.ip.inputs;
		for (i < nonSsaVars.length) {
			var instr = inputs[i].dest;
			if (instr != null) {
				printer.buf.put2("%d. \"%s\": ", i, nonSsaVars[i].name());
				printer.buf.putref(instr).putc('=');
				putVal(interp.getVal(instr), nonSsaVars[i].vtype);
			}
		}
		infoVal(inputs);
	}
	def infoInputs() {
		var inputs = interp.frame.ip.inputs;
		var vtypes = if (SsaApplyOp.?(interp.frame.ip), SsaApplyOp.!(interp.frame.ip).op.typeArgs);
		for (i < inputs.length) {
			var instr = inputs[i].dest;
			if (instr != null) {
				printer.buf.put1("%d. ", i);
				printer.buf.putref(instr).putc('=');
				putVal(interp.getVal(instr), if(vtypes!=null, vtypes[i]));
			}
		}
		infoVal(inputs);
	}
	def infoVal(inputs: Array<SsaDfEdge>) {
		if (inputs.length == 0) return;
		Terminal.put("More info? (index): ");
		var result = parser.getInt();
		if (result.0 && result.1 < inputs.length) {
			var instr = inputs[result.1].dest;
			if (instr == null) {
				Terminal.put("Nothing to show\n");
				return;
			}
			var val = interp.getVal(instr);
			if (Record.?(val)) {
				var r = Record.!(val), line = r.values.length;
				if (line > PRINT_LIMIT) {
					Terminal.put1("Do you wish to see all output (%d lines)? ", line);
					if (!parser.getBool()) return;
				}
				if (V3.isClass(r.rtype)) {
					var irclass = prog.ir.getIrClass(r.rtype);
					for (i < r.values.length) {
						var field = irclass.fields[i];
						printer.buf.put1(".%q=", field.render);
						putVal(r.values[i], irclass.fields[i].fieldType);
					}
					return;
				} else if (V3.isArray(r.rtype)) {
					for (i < r.values.length) {
						printer.buf.put1("[%d]=", i);
						putVal(r.values[i], null);
					}
					return;
				}
			}
			Terminal.put("Nothing to show\n");
		}
	}
	def insertBreakpoint(fileName: string, line: int) -> bool {
		for (i < prog.files.length) {
			if (Strings.equal(prog.files[i], fileName)) {
				if (line < prog.vst.files[i].lineEnds.length) {
					for (j < fileMethods[i].length) {
						if (insertBreakpointM(fileMethods[i][j], line)) return true;
					}
				}
				return false;
			}
		}
		return false;
	}
	def insertBreakpointM(method: VstMethod, line: int) -> bool {
		if (method.body.range().contains(line, 0)) {
			var irIndex = method.irIndex, ssa = prog.ir.methods[irIndex].ssa;
			var blocks = ssa.bfBlocks(null);
			for (b in blocks) b.clearMark();
			for (b in blocks) {
				for (i = b.next; i != null && i != b; i = i.next) {
					if (SsaCheckpoint.?(i) && SsaCheckpoint.!(i).source.line == line) {
						var instr = SsaCheckpoint.!(i);
						bps.put(Breakpoint.new(instr));
						return true;
					}
				}
			}
		}
		return false;
	}
	def handleBreakpoint(args: string, on: bool) {
		var result = Ints.parseDecimal(args, 0);
		if (args.length == 0 || result.0 != args.length) {
			Terminal.put1("Invalid breakpoint: %s\n", args);
		} else {
			var index = result.1;
			if (index < bps.length) {
				if (on) bps[index].enable();
				else bps[index].disable();
			} else Terminal.put1("Invalid breakpoint: %d\n", index);
		}
	}
	def putVal(val: Val, vtype: Type) {
		printer.buf.puthashv(val, vtype).end();
		if (vtype != null) {
			printer.buf.putc(':').typeColor();
			vtype.render(printer.buf);
			printer.buf.end().outln();
		} else {
			printer.buf.outln();
		}
	}
	def printHelp(args: string) {
		var id: int;
		if (args == null) {
			for (cmd in DbgCommand) printHelpCmd(cmd.cmdName, cmd.alias, cmd.help);
		} else if (Strings.equal(args, "info")) {
			for (cmd in DbgInfo) printHelpCmd(cmd.cmdName, cmd.alias, cmd.help);
		} else if (Strings.equal(args, "display")) {
			for (cmd in DbgDisplay) printHelpCmd(cmd.cmdName, cmd.alias, cmd.help);
		}
	}
	def printHelpCmd(cmdName: string, alias: string, help: string) {
		if (Strings.equal(cmdName, alias)) printer.buf.puts(cmdName);
		else printer.buf.put2("%s/%s", cmdName, alias);
		printer.buf.pad(' ', 16);
		printer.buf.puts(help).outln();
	}
}

def INVALID = -1;
class DebuggerParser {
	def STDIN = 0;

	def getCommand() -> string {
		var sb = StringBuilder.new();
		System.puts("(debug) ");
		var ch = byte.!(System.fileRead(STDIN));
		while (ch != '\n') {
			sb.putc(ch);
			ch = byte.!(System.fileRead(STDIN));
		}
		return sb.extract();
	}
	def parseCommand(command: string) -> (DbgCommand, /*args*/ string) {
		var name: string;
		var args: string = "";
		for (i < command.length) {
			if (command[i] == ' ') {
				name = Arrays.range(command, 0, i);
				args = Arrays.range(command, i + 1, command.length);
				break;
			}
			if (i == command.length - 1) name = command;
		}
		if (name == null) return (DbgCommand.Unknown, command);
		for (cmd in DbgCommand) {
			if (Strings.equal(name, cmd.cmdName) || Strings.equal(name, cmd.alias)) {
				return (cmd, args);
			}
		}
		return (DbgCommand.Unknown, command);
	}
	def parseInfo(args: string) -> DbgInfo {
		if (args.length == 0) return DbgInfo.Invalid;
		for (e in DbgInfo) {
			if (Strings.equal(args, e.alias) || Strings.equal(args, e.cmdName)) return e;
		}
		return DbgInfo.Invalid;
	}
	def parseBreakpoint(args: string) -> (/*fileName*/string, /*line*/int) {
		if (args.length == 0) return ("", 0);
		for (i < args.length) {
			if (args[i] == ' ') {
				var fileName = Arrays.range(args, 0, i);
				if (!Strings.endsWith(fileName, ".v3")) {
					fileName = Strings.format1("%s.v3", fileName);
				}
				var result = Ints.parseDecimal(args, i+1);
				if (result.0 + i + 1 == args.length) {
					return (fileName, result.1);
				} else return ("", 0);
			}
		}
		return ("", 0);
	}
	def parseDisplay(args: string) -> DbgDisplay {
		if (args.length == 0) return DbgDisplay.Invalid;
		for (e in DbgDisplay) {
			if (Strings.equal(args, e.alias) || Strings.equal(args, e.cmdName)) return e;
		}
		return DbgDisplay.Invalid;
	}
	def parseInt(args: string) -> int {
		if (args.length == 0) return INVALID;
		var result = Ints.parseDecimal(args, 0);
		if (result.0 == args.length) return result.1;
		else return INVALID;
	}
	def getInt() -> (bool, int) {
		var sb = StringBuilder.new();
		var ch = byte.!(System.fileRead(STDIN));
		while (ch != '\n') {
			sb.putc(ch);
			ch = byte.!(System.fileRead(STDIN));
		}
		var input = sb.extract();
		if (input.length == 0) return (false, 0);
		var result = Ints.parseDecimal(input, 0);
		if (result.0 == input.length) return (true, result.1);
		else return (false, 0);
	}
	def getBool() -> bool {
		var sb = StringBuilder.new();
		var ch = byte.!(System.fileRead(STDIN));
		while (ch != '\n') {
			sb.putc(ch);
			ch = byte.!(System.fileRead(STDIN));
		}
		var input = sb.extract();
		if (input[0] == 'y' || input[0] == 'Y') return true;
		else return false;
	}
}
class Breakpoint {
	def ssa: SsaCheckpoint;
	new(ssa) {
		ssa.breakpoint = true;
	}
	def render(out: StringBuilder) -> StringBuilder { 
		return out.put2("%q (%z)", ssa.source.render, ssa.breakpoint);
	}
	def disable() { ssa.breakpoint = false; }
	def enable() { ssa.breakpoint = true; }
}

class SrcPrinter(vstFiles: Array<VstFile>, interp: SsaInterpreter) {
	def padNum = 6;
	def tmpBuf = TerminalBuffer.new();
	def outBuf = TerminalBuffer.new();
	def ends = Vector<int>.new();
	var on: bool;
	var traceCallee: bool;

	def set(on: bool) {
		this.on = on;
		if (on) {
			ends.resize(0);
			tmpBuf.reset();
			outBuf.reset();
		}
	}
	def putData(instr: SsaInstr, prevSp: int, targetSp: int) {
		if (interp.sp != prevSp) return;
		if (!traceCallee && interp.sp != targetSp) return;
		if (SsaCheckpoint.?(instr)) {
			var source = SsaCheckpoint.!(instr).source;
			var point = FilePoint.new(null, source.line, source.column);
			extractTmpConstraint(0);
			ends.put(outBuf.length);
			tmpBuf.putd(source.line).tab().rjustify(' ', padNum, padNum);
			outBuf.puts(tmpBuf.extract());
			outBuf.puts(point.extractLine(vstFiles[0].input, vstFiles[0].lineEnds)).ln();
		} else if (SsaApplyOp.?(instr)) {
			var instr = SsaApplyOp.!(instr), pad = instr.source.column - 1;
			if (VoidType.?(instr.getType())) return;
			extractTmpConstraint(pad);
			tmpBuf.pad(' ', pad);
			V3.renderResult(interp.getVal(instr), instr.getType(), tmpBuf);
		}
	}
	def ln() -> this {
		outBuf.ln();
	}
	def out() {
		extractTmpConstraint(0);
		outBuf.outt();
		ends.resize(0);
	}
	def outN(n: int) {
		var i = if (ends.length - n > 0, ends.length - n, 0);
		var s = Arrays.range(outBuf.buf, ends[i], outBuf.length);
		Terminal.put(s);
	}
	private def extractTmpConstraint(len: int) {
		if (tmpBuf.length >= len) {
			outBuf.pad(' ', padNum).tab().valColor().puts(tmpBuf.ln().extract()).end();
		}
	}
}