// Copyright 2023 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a call-tree profiler by instrumenting SSA.
class SsaTreeProfiler extends TreeProfiler<SsaIntFrame> {
	// instrument the entry instruction and each return instruction
	def onGen(memberRef: IrSpec) {
		var graph = memberRef.asMethod().ssa;
		for (b in graph.bfBlocks(null)) {
			for (i = b.next; i != b; i = i.next) {
				match (i) {
					x: SsaReturn => SsaTreeProfilerRetProbe.new(this).insertBefore(x);
					x: SsaThrow => SsaTreeProfilerRetProbe.new(this).insertBefore(x);
					_ => ;
				}
			}
		}
		SsaTreeProfilerEntryProbe.new(this).insertBefore(graph.startBlock.next);
	}
}
private class SsaTreeProfilerEntryProbe(profiler: SsaTreeProfiler) extends SsaProbe {
	def fire(i: SsaInterpreter) {
		var time = System.ticksUs();
		var topFrame = i.frame;
		if (topFrame != profiler.curNode.frame) {
			profiler.onEntry(topFrame.spec.asMethod(), time);
		}
	}
	def dup() -> SsaTreeProfilerEntryProbe {
		return SsaTreeProfilerEntryProbe.new(profiler);
	}
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.puts("tree-profile-call probe");
	}
}
private class SsaTreeProfilerRetProbe(profiler: SsaTreeProfiler) extends SsaProbe {
	def fire(i: SsaInterpreter) {
		profiler.onRet(System.ticksUs());
	}
	def dup() -> SsaTreeProfilerRetProbe {
		return SsaTreeProfilerRetProbe.new(profiler);
	}
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.puts("tree-profile-return probe");
	}
}

// Implements a basic-block profiler for SSA.
class SsaBlockProfiler {
	var list: List<IrMethod>; // only report instrumented methods

	def report() {
		var all = Arrays.map(Lists.toArray(list), computeMaximum);
		all = Arrays.sort(all, 0, all.length, byMaximum);
		var printer = SsaPrinter.new();
		for (t in all) {
			printer.printGraph("Profiled", t.0.renderLong, t.0.ssa, null);
		}
	}
	def onGen(memberRef: IrSpec) {
		var meth = memberRef.asMethod();
		list = List.new(meth, list);
		for (b in meth.ssa.bfBlocks(null)) {
			var i = b.next;
			var p = SsaBlockProfilerProbe.new();
			while (i != b && SsaPhi.?(i)) i = i.next;
			p.insertBefore(i);
		}
	}
	def computeMaximum(meth: IrMethod) -> (IrMethod, u64) {
		var max = 0uL;
		var graph = meth.ssa;
		for (b in graph.bfBlocks(null)) {
			for (i = b.next; i != b; i = i.next) {
				match (i) {
					x: SsaBlockProfilerProbe => if(x.count > max) max = x.count;
				}
			}
		}
		return (meth, max);
	}
	def byMaximum(a: (IrMethod, u64), b: (IrMethod, u64)) -> bool {
		return a.1 > b.1;
	}
}
private class SsaBlockProfilerProbe extends SsaProbe {
	var count: u64;

	def fire(i: SsaInterpreter) {
		count++;
	}
	def dup() -> SsaBlockProfilerProbe {
		var p = SsaBlockProfilerProbe.new();
		p.count = this.count;
		return p;
	}
	def render(buf: StringBuilder) -> StringBuilder {
		match (buf) {
			x: TerminalBuffer => { render0(x.red()); x.end(); }
			_ => render0(buf);
		}
		return buf;
	}
	def render0(buf: StringBuilder) {
		buf.putd(count).puts(" executions");
	}
}
