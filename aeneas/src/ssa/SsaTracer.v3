// Copyright 2023 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Prints a dynamic call tree as a program executes.
class SsaCallTracer(matcher: VstMatcher, traceParent: bool) {
	def buf = TerminalBuffer.new();
	var depth: int;
	var frame: SsaIntFrame;
	// instrument the code of a method.
	def onGen(memberRef: IrSpec) {
		var meth = memberRef.asMethod();
		if (!matcher.matches(meth.source)) return;
		var graph = meth.ssa;
		for (b in graph.bfBlocks(null)) {
			for (i = b.next; i != b; i = i.next) {
				match (i) {
					x: SsaReturn => SsaCallRetProbe.new(this).insertBefore(x);
					x: SsaThrow => SsaCallRetProbe.new(this).insertBefore(x);
					_ => ;
				}
			}
		}
		SsaCallEntryProbe.new(this).insertBefore(graph.startBlock.next);
	}
}
private class SsaCallEntryProbe(tracer: SsaCallTracer) extends SsaProbe {
	def fire(i: SsaInterpreter) {
		var topFrame = i.frame;
		if (topFrame == tracer.frame) return;
		var buf = tracer.buf;
		// this method has just been entered (i.e. not a loop back to start)
		buf.reset();
		for (i < tracer.depth) buf.puts("  ");
		if (tracer.traceParent && topFrame.prev != null) {
			buf.green();
			topFrame.prev.spec.member.renderLong(buf);
			buf.end();
			buf.puts("(");
			var params = topFrame.prev.spec.asMethod().ssa.params;
			for (j < params.length) {
				if (j > 0) buf.csp();
				var v = i.getVal(params[j]);
				buf.putcv(v, null);
			}
			buf.puts(")\n  => ");
		}
		buf.green();
		topFrame.spec.member.renderLong(buf);
		buf.end();
		buf.puts("(");
		var params = topFrame.spec.asMethod().ssa.params;
		for (j < params.length) {
			if (j > 0) buf.csp();
			var v = i.getVal(params[j]);
			buf.putcv(v, null);
		}
		buf.puts(")").outln();
		tracer.frame = topFrame;
		tracer.depth++;
	}
	def dup() -> SsaCallEntryProbe {
		return SsaCallEntryProbe.new(tracer);
	}
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.puts("trace-call probe");
	}
}
private class SsaCallRetProbe(tracer: SsaCallTracer) extends SsaProbe {
	def fire(i: SsaInterpreter) {
		if(tracer.frame == null) return;
		tracer.frame = tracer.frame.prev;
		tracer.depth--;
	}
	def dup() -> SsaCallRetProbe {
		return SsaCallRetProbe.new(tracer);
	}
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.puts("trace-call-return probe");
	}
}