// Copyright 2017 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Maps names to variable declarations.
def INITIAL = 8;
class VarEnvironment {
	private var keys = Array<string>.new(INITIAL);
	private var vars = Array<VarDecl>.new(INITIAL);
	private var hash = Array<int>.new(INITIAL);
	private var next = Array<int>.new(INITIAL);
	private var table = Array<int>.new(INITIAL);
	private var count: int;
	var scopeStart: int;

	new() { reset(); }
	def reset() {
		count = 0;
		var t = table;
		for (i < t.length) t[i] = -1;
	}
	def enterScope() -> int {
		var prevStart = scopeStart;
		scopeStart = count;
		return prevStart;
	}
	def exitScope(prevStart: int) {
		// Remove entries back to front.
		var mask = keys.length - 1, limit = scopeStart;
		for (i = count - 1; i >= limit; i--) {
			var hm = hash[i] & mask;
			table[hm] = next[i];
		}
		count = limit;
		scopeStart = prevStart;
	}
	def getScopeVars() -> Array<VarDecl> {
		var scopeVars = Array<VarDecl>.new(count - scopeStart);
		for (i = scopeStart; i < count; i++) {
			scopeVars[i - scopeStart] = vars[i];
		}
		return scopeVars;
	}
	def lookupVar(name: string, scopeStart: int) -> VarDecl {
		if (count == 0) return null; // PERF: empty
		if (count == 1 && scopeStart == 0) { // PERF: only one key
			if (Strings.equal(name, keys[0])) return vars[0];
		}
		// Search hash chains, starting at the head for {hash(name)}
		var mask = keys.length - 1;
		var h = Strings.hash(name), hm = h & mask;
		for (i = table[hm]; i >= scopeStart; i = next[i]) {
			if (hash[i] == h) {
				if (Strings.equal(keys[i], name)) return vars[i];
			}
		}
		return null;
	}
	def bindVar(name: string, v: VarDecl) {
		// Insert a new entry at the end.
		if (count == keys.length) grow();
		var i = count++;
		var h = Strings.hash(name), hm = h & (table.length - 1);
		keys[i] = name;
		vars[i] = v;
		hash[i] = h;
		// Add to the next of the hash chain.
		next[i] = table[hm];
		table[hm] = i;
	}
	private def grow() {
		// Grow storage for internal arrays.
		var nlength = keys.length * 2;
		keys = Arrays.grow(keys, nlength);
		vars = Arrays.grow(vars, nlength);
		hash = Arrays.grow(hash, nlength);
		next = Array.new(nlength);
		// Rebuild the hash chains.
		var nt = Array<int>.new(nlength), ot = table;
		for (i < nt.length) nt[i] = -1;
		var c = count, mask = nlength - 1;
		for (i < c) {
			var h = hash[i], hm = h & mask;
			next[i] = nt[hm];
			nt[hm] = i;
		}
		table = nt;
	}
}
