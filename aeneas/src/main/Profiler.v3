// Copyright 2023 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Shared utilities for profiling programs in the interpreter.
class Profiler {
	var total: int;

	def printUs(v: int) {
		Terminal.putd(v / 1000000);
		Terminal.putc('.');
		putDigit(v, 100000, true);
		putDigit(v, 10000, true);
		putDigit(v, 1000, true);
		putDigit(v, 100, true);
		putDigit(v, 10, true);
		putDigit(v, 1, true);
	}
	def printPct(v: int) {
		var t = total;
		if (v >= t) {
			Terminal.put("100.000");
			return;
		}
		divDigit(v, 10, false);
		divDigit(v, 100, true);
		Terminal.putc('.');
		divDigit(v, 1000, true);
		divDigit(v, 10000, true);
		divDigit(v, 100000, true);
	}
	def divDigit(v: int, mod: int, z: bool) {
		var t = total;
		while (mod > 1 && v < (2000000000 / mod)) {
			v = v * 10;
			mod = mod / 10;
		}
		while (mod > 1 && t > 0) {
			t = t / 10;
			mod = mod / 10;
		}
		if (t <= 0) Terminal.putc('0');
		else putDigit(v, t, z);
	}
	def putd4(v: int) {
		if (v < 10)      Terminal.put("   ");
		else if (v < 100) Terminal.put("  ");
		else if (v < 1000) Terminal.put(" ");
		Terminal.putd(v);
	}
	def putd7(v: int) {
		if (v < 10)      Terminal.put("      ");
		else if (v < 100) Terminal.put("     ");
		else if (v < 1000) Terminal.put("    ");
		else if (v < 10000) Terminal.put("   ");
		else if (v < 100000) Terminal.put("  ");
		else if (v < 1000000) Terminal.put(" ");
		Terminal.putd(v);
	}
	def putDigit(v: int, mod: int, z: bool) {
		var digit = (v / mod) % 10;
		if (digit == 0 && !z) Terminal.sp();
		else Terminal.putc(byte.!('0' + digit));
	}
	def printPair(v: int) {
		Terminal.put(Terminal.CTRL_CYAN);
		printUs(v);
		Terminal.put(Terminal.CTRL_DEFAULT);
		Terminal.put(" s / ");
		Terminal.put(Terminal.CTRL_CYAN);
		printPct(v);
		Terminal.put(Terminal.CTRL_DEFAULT);
		Terminal.put(" %");
	}
	def printTotal(meth: IrMethod, p: (int, int)) {
		var name = Strings.render(meth.renderLong);
		Terminal.green("%s", name);
		for (i = name.length; i < 50; i++) {
			Terminal.sp();
		}
		Terminal.put(" x ");
		putd7(p.0);
		Terminal.put(" ");
		printPair(p.1);
		Terminal.ln();
	}
	def reportNode<F>(n: CctNode<F>, depth: int) {
		var max = CLOptions.PROFILE_DEPTH.get();
		if (max > 0 && depth >= max) return;
		for (i < depth) { Terminal.put("  "); }
		if (n.meth == null) {
			Terminal.put("total: ");
			Terminal.put(Terminal.CTRL_CYAN);
			printUs(total);
			Terminal.put(Terminal.CTRL_DEFAULT);
			Terminal.put(" seconds\n");
		} else {
			// compute time inside by subtracting nested time
			var name = n.name();
			Terminal.green("%s", name);
			for (i = depth * 2 + name.length; i < 70; i++) {
				Terminal.sp();
			}
			Terminal.put(" x ");
			putd4(n.count);
			Terminal.put(" ");
			printPair(n.total);
			Terminal.put(" (");
			printPair(n.inside());
			Terminal.put(")\n");
		}
		Lists.apply(n.children, reportNode<F>(_, depth + 1));
	}
	def putV<T>(vec: Vector<T>, val: T) {
		vec.put(val);
	}
}

// a node in the profiling tree
class CctNode<F>(meth: IrMethod, parent: CctNode<F>) {
	var children: List<CctNode<F>>;	// children of this node
	var count: int;			// number of invocations
	var total: int;			// cumulative time
	var nested: int;		// nested time, last entry time
	var frame: F;			// for detecting recursion vs. looping

	// look for a child node of this node in the tree, creating it if necessary
	def findChild(c: IrMethod) -> CctNode<F> {
		for (m = children; m != null; m = m.tail) {
			if (m.head.meth == c) return m.head;
		}
		var n = CctNode<F>.new(c, this);
		children = List.new(n, children);
		return n;
	}
	def inside() -> int {
		var t = total;
		for (l = children; l != null; l = l.tail) {
			t = t - l.head.total;
		}
		return t;
	}
	def name() -> string {
		if (meth == null) return "root";
		if (meth.source != null) return Strings.render(meth.source.renderLong);
		else return Strings.render(meth.render);
	}
}

class TreeProfiler<F> extends Profiler {
	def rootNode = CctNode<F>.new(null, null);	// calling context tree root
	var curNode = rootNode;			// current node

	// create a new node in the profiling tree if necessary and start an interval
	def onEntry(meth: IrMethod, time: int) {
		// this method has just been entered (i.e. not a loop back to start)
		curNode = curNode.findChild(meth);
		curNode.nested = time;
		curNode.count++;
	}
	// record the elapsed time for the method and move to parent node
	def onRet(time: int) {
		curNode.total = curNode.total + (time - curNode.nested);
		curNode = curNode.parent;
	}
	// report the results of profiling
	def report() {
		for (l = rootNode.children; l != null; l = l.tail) {
			total = total + l.head.total;
		}
		rootNode.total = total;
		reportNode(rootNode, 0);
		reportSum();
	}
	def reportSum() {
		// add up all the inside times for all nodes
		var map = HashMap<IrMethod, (int, int)>.new(IrMethod.uid, IrMethod.==);
		var l = List.new(rootNode, null);
		while (l != null) {
			var n = l.head;
			l = l.tail;
			for (c = n.children; c != null; c = c.tail) {
				l = List.new(c.head, l);
			}
			var m = n.meth;
			if (m != null) {
				var s = map[m];
				map[m] = (s.0 + n.count, s.1 + n.inside());
			}
		}
		var vec = Vector<(IrMethod, (int, int))>.new();
		map.apply(putV(vec, _));
		var array = vec.extract();
		array = Arrays.sort(array, 0, array.length, byTime);
		for (e in array) printTotal(e);
	}
	def byTime(a: (IrMethod, (int, int)), b: (IrMethod, (int, int))) -> bool {
		return b.1.1 < a.1.1;
	}
}