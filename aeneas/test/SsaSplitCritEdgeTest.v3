def TEST = UnitTest.new("SsaSplitCritEdge", runAllTests);

def runAllTests() {
	testSplitDiamond0();
	testSplitDiamond1();
}

def empty = StringBuilder.puts(_, "empty");

def testSplitDiamond0() {
	var prog = Program.new();
	var context = SsaContext.new(null, prog);
	var p0 = SsaParam.new(0, Int.TYPE);
	var graph = context.graph = SsaGraph.new([p0], Int.TYPE);
	var s = graph.startBlock;
	var e = SsaBlock.new();
	var builder = SsaBuilder.new(context, graph, s);
	builder.addIf(p0, e, e);
	builder = SsaBuilder.new(context, graph, e);
	builder.addReturn([]);
//	SsaPrinter.new().printGraph("before", empty, graph, null);
	Ssa.splitCriticalEdges(graph);
//	SsaPrinter.new().printGraph("after", empty, graph, null);

	var v = SsaGraphVerifier.new(context);
	v.allowCriticalEdges = false;
	v.verify();
	prog.ERROR.fatalReport("SsaSplitCritEdgeError");
}

def testSplitDiamond1() {
	var prog = Program.new();
	var context = SsaContext.new(null, prog);
	var p0 = SsaParam.new(0, Int.TYPE);
	var graph = context.graph = SsaGraph.new([p0], Int.TYPE);
	var s = graph.startBlock;
	var a = SsaBlock.new();
	var e = SsaBlock.new();
	var builder = SsaBuilder.new(context, graph, s);
	builder.addIf(p0, a, e);
	builder = SsaBuilder.new(context, graph, a);
	builder.addGoto(e);
	builder = SsaBuilder.new(context, graph, e);
	builder.addReturn([]);
//	SsaPrinter.new().printGraph(null, null, graph, null);
	Ssa.splitCriticalEdges(graph);
//	SsaPrinter.new().printGraph(null, null, graph, null);

	var v = SsaGraphVerifier.new(context);
	v.allowCriticalEdges = false;
	v.verify();
	prog.ERROR.fatalReport("SsaSplitCritEdgeError");
}
